#!/usr/bin/microperl

our $DEBUG            = 1;
our $IPTABLES_FILE    = '/etc/firewall.user';
our $SL_IPTABLES_FILE = '/etc/firewall.user.sl';
our $IPTABLES         = '/usr/sbin/iptables';
our $FIREWALL         = '/etc/init.d/S35firewall';
our $CONFIG_FILE      = '/etc/sl.conf';

my ($fh, $config_proxy);
open($fh, '<', $CONFIG_FILE) or die $!;
while (<$fh>) {
    next unless $_ =~ m/^proxy/;
    $config_proxy = (split(/\s+/, $_))[1];
}
close($fh) or die $!;
print "Using proxy $config_proxy\n" if $DEBUG;

# ping the proxy
if (ping_ok($config_proxy)) {
    print "ping was ok, updating proxy\n" if $DEBUG;

    set_firewall('sl');

    exit(0);
}

# set the routing table to default
print STDERR "No available proxies, setting default route\n";
set_firewall('default');
exit(0);

sub set_firewall {
    my $route = shift;

    # first see if the correct firewall is set
    my $default_md5 = (split(/\s+/, `/usr/bin/md5sum /etc/firewall.user`))[0];
    my $route_md5 =
      (split(/\s+/, `/usr/bin/md5sum /etc/firewall.user.$route`))[0];

    if ($default_md5 eq $route_md5) {

        # files are identical
        print "set_firewall on existing firewall $route\n" if $DEBUG;
        return 1;
    }

    # race condition after firmware update, the default routing table is
    # used so we make sure to check for the existence of a DNAT target
    if ($route eq 'sl') {
    	# better have a DNAT target
	my $has_dnat = grep { /^DNAT/ } ( `iptables -t nat --list` );
	return 1 if ($has_dnat > 0);
    }

    # files are different go ahead with the update
    # stop the firewall
    my @args = ('/bin/sh', $FIREWALL, 'stop');
    system(@args) == 0 or die "system @args failed: $?";    

    # remove the existing file
    chdir('/etc');
    unlink('firewall.user') or die $!;

    # relink the files
    my $link    = `ln -s firewall.user.$route firewall.user`;

    # start the firewall
    my @args = ('/bin/sh', $FIREWALL, 'start');
    system(@args) == 0 or die "system @args failed: $?";    

    print "Firewall restarted: $link\n" if $DEBUG;
    return 1;
}

sub ping_ok {
    my $proxy = shift;

    # grab the mac address
    my $ifconfig = `ifconfig`;
    my ($macaddr) = $ifconfig =~ m/(\w{2}\:\w{2}\:\w{2}\:\w{2}\:\w{2}\:\w{2})/;
    print "Macaddr is $macaddr\n" if $DEBUG;

    my $loc = "http://$proxy/sl_secret_ping_button/$macaddr";
    print "Making request to $loc\n" if $DEBUG;
    my $ping = `wget $loc 2>&1`;

    if (   ($ping =~ m/error 50/i)
        or ($ping =~ m/connection refused/i)
        or ($ping =~ m/error/i))
    {
        print STDERR "Proxy $proxy returned ping error:\n  $ping\n";
        return;
    }
    print "Ping returned ok:  $ping\n" if $DEBUG;
    return 1;
}

1;
