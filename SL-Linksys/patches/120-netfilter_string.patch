diff -X .ignore -Nru linux.old/Documentation/Configure.help linux.dev/Documentation/Configure.help
--- linux.old/Documentation/Configure.help   Sun Apr  3 18:42:19 2005
+++ linux.dev/Documentation/Configure.help       Mon Oct 29 22:48:17 2007
@@ -2831,6 +2831,14 @@
   If you want to compile it as a module, say 'M' here and read
   Documentation/modules.txt.  If unsure, say 'N'.
 
+Silver Lining protocol support
+CONFIG_IP_NF_NAT_SL
+  Silver Lining connection tracking helper.
+
+  If you want to compile it as a module, say M here and read
+  Documentation/modules.txt.  If unsure, say `Y'.
+
+
 TFTP protocol support
 CONFIG_IP_NF_TFTP
   TFTP connection tracking helper, this is required depending
@@ -2850,6 +2858,15 @@
   If you want to compile it as a module, say M here and read
   <file:Documentation/modules.txt>.  If unsure, say `Y'.
 
+SL http protocol support - deprecated in favor of nat_sl
+CONFIG_IP_NF_SL
+  Tracking SL connections is problematic: special helpers are
+  required for tracking them, since we need to remove the port
+  number from the http request.
+
+  If you want to compile it as a module, say M here and read
+  <file:Documentation/modules.txt>.  If unsure, say `Y'.
+
 User space queueing via NETLINK
 CONFIG_IP_NF_QUEUE
   Netfilter has the ability to queue packets to user space: the
@@ -3008,6 +3025,14 @@
   If you want to compile it as a module, say M here and read
   <file:Documentation/modules.txt>.  If unsure, say `N'.
 
+String match support (EXPERIMENTAL)
+CONFIG_IP_NF_MATCH_STRING
+  String matching alows you to match packets which contain a
+ specified string of characters.
+
+  If you want to compile it as a module, say M here and read
+  Documentation/modules.txt.  If unsure, say `N'.
+
 Owner match support
 CONFIG_IP_NF_MATCH_OWNER
   Packet owner matching allows you to match locally-generated packets
diff -X .ignore -Nru linux.old/include/linux/netfilter_ipv4/ipt_string.h linux.dev/include/linux/netfilter_ipv4/ipt_string.h
--- linux.old/include/linux/netfilter_ipv4/ipt_string.h	1970-01-01 03:00:00.000000000 +0300
+++ linux.dev/include/linux/netfilter_ipv4/ipt_string.h	2007-10-30 14:33:49.000000000 +0400
@@ -0,0 +1,27 @@
+#ifndef _IPT_STRING_H
+#define _IPT_STRING_H
+
+/* *** PERFORMANCE TWEAK ***
+ * Packet size and search string threshold,
+ * above which sublinear searches is used. */
+#define IPT_STRING_HAYSTACK_THRESH     100
+#define IPT_STRING_NEEDLE_THRESH       20
+
+#define BM_MAX_NLEN 256
+#define BM_MAX_HLEN 1024
+
+typedef char *(*proc_ipt_search) (char *, char *, int, int);
+
+struct ipt_string_info {
+    char string[BM_MAX_NLEN];
+    char replace_str[BM_MAX_NLEN];
+    u_int16_t invert;
+    u_int16_t len;
+    u_int16_t replace_len;
+};
+
+extern char *search_sublinear (char *needle, char *haystack, int needle_len, int haystack_len);
+
+extern char *search_linear (char *needle, char *haystack, int needle_len, int haystack_len);
+
+#endif /* _IPT_STRING_H */
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/Makefile linux.dev/net/ipv4/netfilter/Makefile
--- linux.old/net/ipv4/netfilter/Makefile    Mon Aug 25 04:44:44 2003
+++ linux.dev/net/ipv4/netfilter/Makefile        Sat Sep  8 15:40:22 2007
@@ -48,10 +48,15 @@
        export-objs += ip_conntrack_irc.o
 endif
 
+
+export-objs += ip_nat_sl.o
+
+
 # NAT helpers 
 obj-$(CONFIG_IP_NF_NAT_AMANDA) += ip_nat_amanda.o
 obj-$(CONFIG_IP_NF_NAT_TFTP) += ip_nat_tftp.o
 obj-$(CONFIG_IP_NF_NAT_FTP) += ip_nat_ftp.o
+obj-$(CONFIG_IP_NF_NAT_SL) += ip_nat_sl.o
 obj-$(CONFIG_IP_NF_NAT_IRC) += ip_nat_irc.o
 
 # generic IP tables 
@@ -85,6 +90,7 @@
 obj-$(CONFIG_IP_NF_MATCH_STATE) += ipt_state.o
 obj-$(CONFIG_IP_NF_MATCH_CONNTRACK) += ipt_conntrack.o
 obj-$(CONFIG_IP_NF_MATCH_UNCLEAN) += ipt_unclean.o
+obj-$(CONFIG_IP_NF_MATCH_STRING) += ipt_string.o
 obj-$(CONFIG_IP_NF_MATCH_TCPMSS) += ipt_tcpmss.o
 
 # targets
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/Config.in linux.dev/net/ipv4/netfilter/Config.in
--- linux.old/net/ipv4/netfilter/Config.in   Wed Jan 19 06:10:13 2005
+++ linux.dev/net/ipv4/netfilter/Config.in       Thu Sep  6 19:26:28 2007
@@ -42,6 +42,8 @@
   fi
   if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
     dep_tristate '  Unclean match support (EXPERIMENTAL)' CONFIG_IP_NF_MATCH_UNCLEAN $CONFIG_IP_NF_IPTABLES
+    dep_tristate '  String match support (EXPERIMENTAL) ' CONFIG_IP_NF_MATCH_STRING $CONFIG_IP_NF_IPTABLES
+    dep_tristate '  SL nat string removal support (EXPERIMENTAL) ' CONFIG_IP_NF_NAT_SL $CONFIG_IP_NF_NAT
     dep_tristate '  Owner match support (EXPERIMENTAL)' CONFIG_IP_NF_MATCH_OWNER $CONFIG_IP_NF_IPTABLES
   fi
 # The targets
@@ -92,7 +94,7 @@
           define_tristate CONFIG_IP_NF_NAT_TFTP $CONFIG_IP_NF_NAT
         fi
       fi
-    fi
+   fi
   fi
 
   dep_tristate '  Packet mangling' CONFIG_IP_NF_MANGLE $CONFIG_IP_NF_IPTABLES 
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/ipt_string.c linux.dev/net/ipv4/netfilter/ipt_string.c
--- linux.old/net/ipv4/netfilter/ipt_string.c	Wed Dec 31 16:00:00 1969
+++ linux.dev/net/ipv4/netfilter/ipt_string.c	Wed Sep  5 00:23:41 2007
@@ -0,0 +1,287 @@
+/* Kernel module to match a string into a packet.
+ *
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ * 
+ * ChangeLog
+ *	02.09.2007: Fred Moyer <fred@redhotpenguin.com>, 
+ *		Evgeniy Polyakov <johnpol@2ka.mipt.ru>	
+ * 		Added ability to remove a matching string from the packet
+ *      	     
+ *	22.03.2004: Michael Rash <mbr@cipherdyne.org>
+ *		Added ability to replace a matching string in packet data
+ *		with a new string (checksum automatically recalculated for
+ *		tcp).
+ *	19.02.2002: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed SMP re-entrancy problem using per-cpu data areas
+ *		for the skip/shift tables.
+ *	02.05.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed kernel panic, due to overrunning boyer moore string
+ *		tables. Also slightly tweaked heuristic for deciding what
+ * 		search algo to use.
+ * 	27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ * 		Implemented Boyer Moore Sublinear search algorithm
+ * 		alongside the existing linear search based on memcmp().
+ * 		Also a quick check to decide which method to use on a per
+ * 		packet basis.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/file.h>
+#include <net/sock.h>
+#include <net/tcp.h>
+#include <net/udp.h>
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_string.h>
+
+MODULE_LICENSE("GPL");
+
+struct string_per_cpu {
+	int *skip;
+	int *shift;
+	int *len;
+};
+
+struct string_per_cpu *bm_string_data=NULL;
+
+/* Boyer Moore Sublinear string search - VERY FAST */
+char *search_sublinear (char *needle, char *haystack, int needle_len, int haystack_len) 
+{
+	int M1, right_end, sk, sh;  
+	int ended, j, i;
+
+	int *skip, *shift, *len;
+	
+	/* use data suitable for this CPU */
+	shift=bm_string_data[smp_processor_id()].shift;
+	skip=bm_string_data[smp_processor_id()].skip;
+	len=bm_string_data[smp_processor_id()].len;
+	
+	/* Setup skip/shift tables */
+	M1 = right_end = needle_len-1;
+	for (i = 0; i < BM_MAX_HLEN; i++) skip[i] = needle_len;  
+	for (i = 0; (int) needle[i]; i++) skip[(int) needle[i]] = M1 - i;  
+
+	for (i = 1; i < needle_len; i++) {   
+		for (j = 0; j < needle_len && needle[M1 - j] == needle[M1 - i - j]; j++);  
+		len[i] = j;  
+	}  
+
+	shift[0] = 1;  
+	for (i = 1; i < needle_len; i++) shift[i] = needle_len;  
+	for (i = M1; i > 0; i--) shift[len[i]] = i;  
+	ended = 0;  
+	
+	for (i = 0; i < needle_len; i++) {  
+		if (len[i] == M1 - i) ended = i;  
+		if (ended) shift[i] = ended;  
+	}  
+
+	/* Do the search*/  
+	while (right_end < haystack_len)
+	{
+		for (i = 0; i < needle_len && haystack[right_end - i] == needle[M1 - i]; i++);  
+		if (i == needle_len) {
+			return haystack+(right_end - M1);
+		}
+		
+		sk = skip[(int) haystack[right_end - i]];  
+		sh = shift[i];
+		right_end = max(right_end - i + sk, right_end + sh);  
+	}
+
+	return NULL;
+}  
+
+/* Linear string search based on memcmp() */
+char *search_linear (char *needle, char *haystack, int needle_len, int haystack_len) 
+{
+	char *k = haystack + (haystack_len-needle_len);
+	char *t = haystack;
+	
+	while ( t <= k ) {
+		if (memcmp(t, needle, needle_len) == 0)
+			return t;
+		t++;
+	}
+
+	return NULL;
+}
+
+
+static int
+match(const struct sk_buff *skb,
+      const struct net_device *in,
+      const struct net_device *out,
+      const void *matchinfo,
+      int offset,
+      const void *hdr,
+      u_int16_t datalen,
+      int *hotdrop)
+{
+	const struct ipt_string_info *info = matchinfo;
+	struct iphdr *ip = skb->nh.iph;
+	struct tcphdr *tcph;
+	int hlen, nlen,newlen  ;
+	char *needle, *haystack, *repl_ptr;
+	proc_ipt_search search=search_linear;
+	int result;
+
+	if ( !ip ) return 0;
+
+	/* get lengths, and validate them */
+	nlen=info->len;
+	hlen=ntohs(ip->tot_len)-(ip->ihl*4);
+	if ( nlen > hlen ) return 0;
+
+	needle=(char *)&info->string;
+	haystack=(char *)ip+(ip->ihl*4);
+
+	/* The sublinear search comes in to its own
+	 * on the larger packets */
+	if ( (hlen>IPT_STRING_HAYSTACK_THRESH) &&
+	  	(nlen>IPT_STRING_NEEDLE_THRESH) ) {
+		if ( hlen < BM_MAX_HLEN ) {
+			search=search_sublinear;
+		}else{
+			if (net_ratelimit())
+				printk(KERN_INFO "ipt_string: Packet too big "
+					"to attempt sublinear string search "
+					"(%d bytes)\n", hlen );
+		}
+	}
+	/* this copies the remaining bits to the offset where the replacement
+	   string is.  example, if we replace 
+
+	   host: foo.com:8135\r\ncontent-type: text/html\r\n
+			^    ^ 				   ^
+			|    |-------- rest_len -----------|
+			|    |
+			|    |- offset	
+			|
+			|-- repl_ptr
+	   using --string ":8135" --replace-string "_"   */
+
+	repl_ptr = search(needle, haystack, nlen, hlen);
+	if (repl_ptr != NULL ) {
+		int offset, rest_len;
+		unsigned int tcplen;
+
+		/*  distance from the end to the replacement pointer beginning */
+		rest_len = (unsigned int)((char *)skb->tail - repl_ptr)-nlen;
+	/*	printk(KERN_DEBUG "rest_len:    %u\n", rest_len); */
+			
+		/* distance from the end of the repl_ptr to the start of the skb data */
+		offset = (int)((char *)&repl_ptr[nlen] - (char *)skb->data);
+	/*	printk(KERN_DEBUG "offset:    %u\n", offset); */
+
+		/* copy over the replacement section */ 
+		if (skb_copy_bits(skb, offset, repl_ptr, rest_len))
+					return 0;
+	/*	printk(KERN_DEBUG "repl_ptr %s\n", repl_ptr); */
+	
+		/* trim the end of the data buffer */
+		skb_trim(skb, skb->len - nlen);
+
+		/* pad the rest with zeros */
+		skb = skb_pad(skb, nlen);
+
+		/* prevent tcp sequence from getting out of whack - doesn't work */
+		//	skb->h.th->seq = htons(ntohs(skb->h.th->seq) + nlen); 
+	//	printk(KERN_DEBUG "skb->h.th->seq  %u\n", ntohs(skb->h.th->seq));
+
+		/* set ip header total length */ 
+		skb->nh.iph->tot_len = htons(ntohs(ip->tot_len) - nlen);
+	//	printk(KERN_DEBUG "skb->nh.iph->tot_len: %u\n", skb->nh.iph->tot_len);
+		
+		/* set the ip header checksum */
+		skb->nh.iph->check = 0;
+		skb->nh.iph->check = ip_fast_csum((unsigned char *)skb->nh.iph, skb->nh.iph->ihl);
+
+		/* set the tcp header length */
+		tcplen = skb->len - (skb->nh.iph->ihl<<2);
+	//	printk(KERN_DEBUG "tcplen:   %u\n", tcplen);
+
+		/* set the tcp header checksum */
+		tcph = (struct tcphdr *)((u_int32_t*)skb->nh.iph + skb->nh.iph->ihl);
+		tcph->check = 0;
+		tcph->check = tcp_v4_check(tcph, tcplen, skb->nh.iph->saddr,
+					skb->nh.iph->daddr,
+					csum_partial((char *)tcph, tcplen, 0));
+	}
+    return ((repl_ptr!=NULL) ^ info->invert);
+}
+
+static int
+checkentry(const char *tablename,
+           const struct ipt_ip *ip,
+           void *matchinfo,
+           unsigned int matchsize,
+           unsigned int hook_mask)
+{
+
+       if (matchsize != IPT_ALIGN(sizeof(struct ipt_string_info)))
+               return 0;
+
+       return 1;
+}
+
+void string_freeup_data(void)
+{
+	int c;
+	
+	if ( bm_string_data ) {
+		for(c=0; c<smp_num_cpus; c++) {
+			if ( bm_string_data[c].shift ) kfree(bm_string_data[c].shift);
+			if ( bm_string_data[c].skip ) kfree(bm_string_data[c].skip);
+			if ( bm_string_data[c].len ) kfree(bm_string_data[c].len);
+		}
+		kfree(bm_string_data);
+	}
+}
+
+static struct ipt_match string_match
+= { { NULL, NULL }, "string", &match, &checkentry, NULL, THIS_MODULE };
+
+static int __init init(void)
+{
+	int c;
+	size_t tlen;
+	size_t alen;
+
+	tlen=sizeof(struct string_per_cpu)*smp_num_cpus;
+	alen=sizeof(int)*BM_MAX_HLEN;
+	
+	/* allocate array of structures */
+	if ( !(bm_string_data=kmalloc(tlen,GFP_KERNEL)) ) {
+		return 0;
+	}
+	
+	memset(bm_string_data, 0, tlen);
+	
+	/* allocate our skip/shift tables */
+	for(c=0; c<smp_num_cpus; c++) {
+		if ( !(bm_string_data[c].shift=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+		if ( !(bm_string_data[c].skip=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+		if ( !(bm_string_data[c].len=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+	}
+	
+	return ipt_register_match(&string_match);
+
+alloc_fail:
+	string_freeup_data();
+	return 0;
+}
+
+static void __exit fini(void)
+{
+	ipt_unregister_match(&string_match);
+	string_freeup_data();
+}
+
+module_init(init);
+module_exit(fini);
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/ip_nat_sl.c linux.dev/net/ipv4/netfilter/ip_nat_sl.c
--- linux.old/net/ipv4/netfilter/ip_nat_sl.c	Wed Dec 31 16:00:00 1969
+++ linux.dev/net/ipv4/netfilter/ip_nat_sl.c	Wed Oct 29 12:35:30 2007
@@ -0,0 +1,370 @@
+/* Base stolen from ip_nat_ftp.c 
+   SL extension for TCP NAT alteration.
+   Inspiration from http://ftp.gnumonks.org/pub/doc/conntrack+nat.html */
+
+#include <linux/module.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <net/tcp.h>
+#include <linux/netfilter_ipv4/ip_nat.h>
+#include <linux/netfilter_ipv4/ip_nat_helper.h>
+#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#include <linux/netfilter_ipv4/ipt_string.h>
+#include <linux/jhash.h>
+
+#if 0
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif
+
+#define DEBUG 0
+
+#define SL_PORT 80
+
+/* maximum expected length of http header */
+#define HEADER_MAX_LEN 1500
+
+DECLARE_LOCK(ip_sl_lock);
+
+/* the removal string for the port */ 
+#define PORT_NEEDLE_LEN 5
+static char port_needle[PORT_NEEDLE_LEN+1] = ":8135";
+
+/* needle for GET */
+#define GET_NEEDLE_LEN 5
+static char get_needle[GET_NEEDLE_LEN+1] = "GET /";
+
+/* needle for ping button */
+#define PING_NEEDLE_LEN 21
+static char ping_needle[PING_NEEDLE_LEN+1] = "sl_secret_ping_button";
+
+/* needle for host header */
+#define HOST_NEEDLE_LEN 6
+static char host_needle[HOST_NEEDLE_LEN+1] = "Host: ";
+
+#define SEARCH_FAIL 0
+
+static int sl_data_fixup(  struct ip_conntrack *ct,
+			  struct sk_buff **pskb,
+			  enum ip_conntrack_info ctinfo,
+			  struct ip_conntrack_expect *expect)
+{
+	struct iphdr *iph = (*pskb)->nh.iph;
+	struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+
+	/* needed to remove string */
+	char *haystack, *repl_ptr;
+
+	/* equivalent to skb->data but apparently earlier
+	   needed because ip_nat_mangle_tcp_packet uses it as a ref point */ 
+	unsigned char *skb_early_data;
+	
+	int hlen, match_offset, match_len, rep_len;
+    proc_ipt_search search=search_linear;
+	
+	/* this is going to sl dc, add machdr */
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: sl_data_fixup\n");
+#endif
+
+	/* no ip header is a problem */
+	if ( !iph ) return SEARCH_FAIL;
+
+	/* get lengths, and validate them */
+	hlen=ntohs(iph->tot_len)-(iph->ihl*4);
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: haystack orig length: %d\n", hlen);
+#endif
+	hlen = (hlen < HEADER_MAX_LEN) ? hlen : HEADER_MAX_LEN;
+	
+	/* where we are looking */
+	haystack=(char *)iph+(iph->ihl*4);
+
+	/* max length to search for :8135 port_needle */
+   
+	/* The sublinear search comes in to its own
+     	   on the larger packets */
+    	if ( (hlen > IPT_STRING_HAYSTACK_THRESH) &&
+        	(PORT_NEEDLE_LEN > IPT_STRING_NEEDLE_THRESH) ) {
+        	if ( hlen < BM_MAX_HLEN ) {
+            		search=search_sublinear;
+        	}else{ 
+           		if (net_ratelimit())
+                		printk(KERN_INFO "ipt_string: Packet too big "
+                    			"to attempt sublinear string search "
+                    			"(%d bytes)\n", hlen );
+		}
+	}
+
+   	/* search and remove port numbers or add machdr */
+	repl_ptr = search(port_needle, haystack, PORT_NEEDLE_LEN, hlen );
+
+	if (repl_ptr != NULL ) {
+		/* mangle the packet, removing the port number */
+		/* distance past match offset of string to match  */
+		match_len = (int)((char *)(*pskb)->tail - (char *)repl_ptr); 
+#ifdef DEBUG
+//		printk(KERN_DEBUG "match_len: %d\n", match_len); 
+#endif
+		rep_len = match_len - PORT_NEEDLE_LEN;	
+
+		skb_early_data = (void *)tcph + tcph->doff*4;
+		match_offset = (int)(repl_ptr - (int)skb_early_data);
+	
+#ifdef DEBUG
+//		printk(KERN_DEBUG "match_len %d, rep_len %d\n", match_len, rep_len);
+//		printk(KERN_DEBUG "match_offset %d\n", match_offset);
+//		printk(KERN_DEBUG "UPDATED rep_buffer: %s\n", &repl_ptr[PORT_NEEDLE_LEN]);
+//		printk(KERN_DEBUG "UPDATED rep_len: %u\n", rep_len);
+//		printk(KERN_DEBUG "\npre-mangle packet: %s\n\n", &repl_ptr[-match_offset]);
+#endif
+
+		if (!ip_nat_mangle_tcp_packet(pskb, ct, ctinfo, 
+					match_offset, match_len, 
+					&repl_ptr[PORT_NEEDLE_LEN], rep_len)) {  
+			printk(KERN_ERR "unable to mangle tcp packet\n");
+			return 0;
+		}
+#ifdef DEBUG
+//		printk(KERN_DEBUG "\npacket mangled ok: %s\n\n", &repl_ptr[-match_offset]);
+#endif		
+
+	} else if (repl_ptr == NULL) {
+
+#ifdef DEBUG
+//			printk(KERN_DEBUG "port_needle :8135 NOT found, trying get_needle\n");
+#endif		
+		/* see if this is a GET request */
+       		repl_ptr = search(get_needle, haystack, GET_NEEDLE_LEN, hlen);
+
+		/* no repl_ptr is a problem */
+		if (repl_ptr == NULL) {
+#ifdef DEBUG
+//			printk(KERN_DEBUG "no get_needle found in packet\n");
+#endif		
+			return 1;
+		} else if ( repl_ptr != NULL) {
+			
+#ifdef DEBUG
+//			printk(KERN_DEBUG "get_needle FOUND: %s\n", repl_ptr); 
+#endif		
+			/* make sure this isn't a ping */
+			repl_ptr = search(ping_needle, haystack, PING_NEEDLE_LEN, hlen);
+			if (repl_ptr != NULL) {
+				/* this is a ping */
+#ifdef DEBUG
+//				printk(KERN_DEBUG "secret ping button FOUND: %s\n", repl_ptr); 
+#endif		
+					return 1;
+			}
+			
+			/* look for the Host: header */
+			repl_ptr = search(host_needle, haystack, HOST_NEEDLE_LEN, hlen);
+			if (repl_ptr == NULL) {
+				printk(KERN_ERR "no host header found in packet\n");
+				return 1;
+			}  else if (repl_ptr != NULL) {	
+				/* found a host header, insert the mac addr */ 
+				struct ethhdr *bigmac = (*pskb)->mac.ethernet;
+				unsigned int jhashed = 0;
+		        int machdr_len = 0;
+				char dst_string[11];
+				char machdr[28];
+				if (bigmac->h_source == NULL) {
+					printk(KERN_ERR "no source mac found\n");
+					return 1;
+				} else  {
+#ifdef DEBUG
+//					printk(KERN_DEBUG "source mac found: %x%x%x%x%x%x\n",
+//							bigmac->h_source[0],
+//							bigmac->h_source[1],
+//							bigmac->h_source[2],
+//							bigmac->h_source[3],
+//							bigmac->h_source[4],
+//							bigmac->h_source[5]);
+//					printk(KERN_DEBUG "dest mac found: %x%x%x%x%x%x\n",
+//							bigmac->h_dest[0],
+//							bigmac->h_dest[1],
+//							bigmac->h_dest[2],
+//							bigmac->h_dest[3],
+//							bigmac->h_dest[4],
+//							bigmac->h_dest[5]);
+#endif		
+					sprintf(dst_string, "%x%x%x%x%x%x",
+							bigmac->h_dest[0],
+							bigmac->h_dest[1],
+							bigmac->h_dest[2],
+							bigmac->h_dest[3],
+							bigmac->h_dest[4],
+							bigmac->h_dest[5]);
+					/* jenkins hash obfuscation */
+ 					jhashed = jhash((void *)bigmac->h_source, 
+							sizeof(bigmac->h_source), 0);
+#ifdef DEBUG
+//					printk(KERN_DEBUG "jhashed_src: %x\n", jhashed);
+//					printk(KERN_DEBUG "dst_string %s\n", dst_string);
+#endif		
+				
+					/* create the http header */
+					machdr_len = sprintf(machdr, "X-SL: %x|%s\r\n", 
+									jhashed, dst_string);
+#ifdef DEBUG
+//					printk(KERN_DEBUG "ip_nat_sl: machdr %s, length %d\n", 
+//							 machdr, machdr_len);
+#endif		
+					if (machdr_len == 0) {
+						printk(KERN_ERR "sprintf fail for machdr");
+						return 1;
+					} else {
+
+						match_len = 0;
+						rep_len = match_len + sizeof(machdr);	
+#ifdef DEBUG
+//						printk(KERN_DEBUG "host match_len %u\n", match_len);	
+//						printk(KERN_DEBUG "host rep_len %u\n", rep_len);	
+//						printk(KERN_DEBUG "host match_offset %u\n", match_offset);	
+#endif		
+						skb_early_data = (void *)tcph + tcph->doff*4;
+						match_offset = (int)(repl_ptr - (int)skb_early_data);
+							
+						/* insert the machdr into the http headers */
+						if (!ip_nat_mangle_tcp_packet(pskb, ct, ctinfo, 
+								match_offset, match_len, 
+								machdr, rep_len)) {  
+							printk(KERN_ERR "failed mangle packet\n");
+							return 0;
+						}
+//						printk(KERN_DEBUG "\npacket mangled ok: %s\n\n", 
+//							&repl_ptr[-match_offset]);
+					}
+				}
+			}
+		}
+	}
+	return 1;
+}
+
+static unsigned int sl_help(struct ip_conntrack *ct,
+			 struct ip_conntrack_expect *exp,
+			 struct ip_nat_info *info,
+			 enum ip_conntrack_info ctinfo,
+			 unsigned int hooknum,
+			 struct sk_buff **pskb)
+{
+	struct iphdr *iph = (*pskb)->nh.iph;
+	struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+	unsigned int datalen;
+	int dir;
+
+	/* HACK - skip dest port not 80 */
+	if (ntohs(tcph->dest) != SL_PORT) {
+		return 1;
+	}
+// #ifdef DEBUG
+//	printk(KERN_DEBUG "ip_nat_sl: tcphdr dest port %d, source port %d, ack seq %d\n", 
+//			ntohs(tcph->dest), ntohs(tcph->source),
+//			tcph->ack_seq);
+	/* let SYN packets pass */
+//	printk(KERN_DEBUG "ip_nat_sl: FIN: %d\n", tcph->fin);
+//	printk(KERN_DEBUG "ip_nat_sl: SYN: %d\n", tcph->syn);
+//	printk(KERN_DEBUG "ip_nat_sl: RST: %d\n", tcph->rst);
+//	printk(KERN_DEBUG "ip_nat_sl: PSH: %d\n", tcph->psh);
+// #endif	
+	if (!( (tcph->psh == 1) && (tcph->ack == 1)) ) {
+#ifdef DEBUG
+//		printk(KERN_INFO "ip_nat_sl: not psh and ack\n");
+#endif	
+		return NF_ACCEPT;
+	}
+
+	/* nasty debugging */
+	if (hooknum == NF_IP_POST_ROUTING) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: postrouting\n");
+#endif	
+	} else if (hooknum == NF_IP_PRE_ROUTING) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: prerouting\n");
+#endif	
+	}
+
+	/* packet direction */
+	dir = CTINFO2DIR(ctinfo);
+	if (dir == IP_CT_DIR_ORIGINAL) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: original direction\n");
+#endif	
+	} else if (dir == IP_CT_DIR_REPLY) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: reply direction\n");
+#endif	
+	} else if (dir == IP_CT_DIR_MAX) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "ip_nat_sl: max direction\n");
+#endif	
+	}
+
+	/* Only mangle things once: original direction in POST_ROUTING
+	   and reply direction on PRE_ROUTING. */
+	if (!((hooknum == NF_IP_POST_ROUTING) && (dir == IP_CT_DIR_ORIGINAL)) ) {
+#ifdef DEBUG
+//		printk(KERN_DEBUG "nat_sl: Not ORIGINAL and POSTROUTING, returning\n");
+#endif	
+		return NF_ACCEPT;
+	}
+	datalen = (*pskb)->len - iph->ihl * 4 - tcph->doff * 4;
+
+	if (!sl_data_fixup(ct, pskb, ctinfo, exp)) {
+			printk(KERN_ERR "ip_nat_sl: error sl_data_fixup\n");
+			return NF_DROP;
+	}
+	
+#ifdef DEBUG
+//	printk(KERN_DEBUG "ip_nat_sl: sl_help end, returning nf_accept\n");
+#endif	
+	return NF_ACCEPT;
+}
+
+struct ip_nat_helper sl;
+
+static void fini(void)
+{
+#ifdef DEBUG
+//	printk(KERN_DEBUG "ip_nat_sl: unregistering for port %d\n", SL_PORT);
+#endif
+	ip_nat_helper_unregister(&sl);
+}
+
+static int __init init(void)
+{
+	int ret = 0;
+	
+    sl.list.next = 0;
+    sl.list.prev = 0;
+	sl.me = THIS_MODULE;
+	sl.flags = (IP_NAT_HELPER_F_STANDALONE|IP_NAT_HELPER_F_ALWAYS);
+    sl.tuple.dst.protonum = IPPROTO_TCP;
+	
+    sl.tuple.dst.u.tcp.port = __constant_htons(SL_PORT);
+    sl.mask.dst.u.tcp.port = 0;
+	sl.help = sl_help;
+	sl.expect = NULL;
+#ifdef DEBUG
+//	printk(KERN_DEBUG "ip_nat_sl: Trying to register for port %d\n", SL_PORT);
+#endif
+	ret = ip_nat_helper_register(&sl);
+	if (ret) {
+  	  printk(KERN_ERR "ip_nat_sl: error registering helper for port %d\n", SL_PORT);
+	  fini();
+	  return ret;
+	}
+	return ret;
+}
+
+EXPORT_SYMBOL(ip_sl_lock);
+
+module_init(init);
+module_exit(fini);
+MODULE_LICENSE("GPL");
