--- linux.old/Documentation/Configure.help	Sun Apr  3 18:42:19 2005
+++ linux.new/Documentation/Configure.help	Mon Apr 28 12:31:39 2008
@@ -2831,6 +2831,20 @@
   If you want to compile it as a module, say 'M' here and read
   Documentation/modules.txt.  If unsure, say 'N'.
 
+Silver Lining protocol support
+CONFIG_IP_NF_NAT_SL
+  Silver Lining connection tracking helper.
+
+  If you want to compile it as a module, say M here and read
+  Documentation/modules.txt.  If unsure, say `Y'.
+
+Silver Lining port protocol support
+CONFIG_IP_NF_NAT_SLPORT
+  Silver Lining connection tracking helper, port only.
+
+  If you want to compile it as a module, say M here and read
+  Documentation/modules.txt.  If unsure, say `Y'.
+
 TFTP protocol support
 CONFIG_IP_NF_TFTP
   TFTP connection tracking helper, this is required depending
@@ -2850,6 +2864,24 @@
   If you want to compile it as a module, say M here and read
   <file:Documentation/modules.txt>.  If unsure, say `Y'.
 
+SL http protocol support
+CONFIG_IP_NF_SL
+  Tracking SL connections is problematic: special helpers are
+  required for tracking them, since we need to remove the port
+  number from the http request.
+
+  If you want to compile it as a module, say M here and read
+  <file:Documentation/modules.txt>.  If unsure, say `Y'.
+
+SL http port protocol support
+CONFIG_IP_NF_SLPORT
+  Tracking SL connections is problematic: special helpers are
+  required for tracking them, since we need to remove the port
+  number from the http request.
+
+  If you want to compile it as a module, say M here and read
+  <file:Documentation/modules.txt>.  If unsure, say `Y'.
+
 User space queueing via NETLINK
 CONFIG_IP_NF_QUEUE
   Netfilter has the ability to queue packets to user space: the
@@ -3008,6 +3040,14 @@
   If you want to compile it as a module, say M here and read
   <file:Documentation/modules.txt>.  If unsure, say `N'.
 
+String match support (EXPERIMENTAL)
+CONFIG_IP_NF_MATCH_STRING
+  String matching alows you to match packets which contain a
+ specified string of characters.
+
+  If you want to compile it as a module, say M here and read
+  Documentation/modules.txt.  If unsure, say `N'.
+
 Owner match support
 CONFIG_IP_NF_MATCH_OWNER
   Packet owner matching allows you to match locally-generated packets
diff -X .ignore -Nru linux.old/include/linux/netfilter_ipv4/ipt_string.h linux.dev/include/linux/netfilter_ipv4/ipt_string.h
--- linux.old/include/linux/netfilter_ipv4/ipt_string.h	1970-01-01 03:00:00.000000000 +0300
+++ linux.new/include/linux/netfilter_ipv4/ipt_string.h	2007-10-30 14:33:49.000000000 +0400
@@ -0,0 +1,27 @@
+#ifndef _IPT_STRING_H
+#define _IPT_STRING_H
+
+/* *** PERFORMANCE TWEAK ***
+ * Packet size and search string threshold,
+ * above which sublinear searches is used. */
+#define IPT_STRING_HAYSTACK_THRESH     100
+#define IPT_STRING_NEEDLE_THRESH       20
+
+#define BM_MAX_NLEN 256
+#define BM_MAX_HLEN 1024
+
+typedef char *(*proc_ipt_search) (char *, char *, int, int);
+
+struct ipt_string_info {
+    char string[BM_MAX_NLEN];
+    char replace_str[BM_MAX_NLEN];
+    u_int16_t invert;
+    u_int16_t len;
+    u_int16_t replace_len;
+};
+
+extern char *search_sublinear (char *needle, char *haystack, int needle_len, int haystack_len);
+
+extern char *search_linear (char *needle, char *haystack, int needle_len, int haystack_len);
+
+#endif /* _IPT_STRING_H */
--- linux.old/net/ipv4//netfilter/Makefile	Mon Aug 25 04:44:44 2003
+++ linux.new/net/ipv4/netfilter/Makefile	Mon Apr 28 12:29:38 2008
@@ -48,10 +48,20 @@
 	export-objs += ip_conntrack_irc.o
 endif
 
+ifdef CONFIG_IP_NF_NAT_SL
+	export-objs += ip_nat_sl.o
+endif
+
+ifdef CONFIG_IP_NF_NAT_SLPORT
+	export-objs += ip_nat_slport.o
+endif
+
 # NAT helpers 
 obj-$(CONFIG_IP_NF_NAT_AMANDA) += ip_nat_amanda.o
 obj-$(CONFIG_IP_NF_NAT_TFTP) += ip_nat_tftp.o
 obj-$(CONFIG_IP_NF_NAT_FTP) += ip_nat_ftp.o
+obj-$(CONFIG_IP_NF_NAT_SL) += ip_nat_sl.o
+obj-$(CONFIG_IP_NF_NAT_SLPORT) += ip_nat_slport.o
 obj-$(CONFIG_IP_NF_NAT_IRC) += ip_nat_irc.o
 
 # generic IP tables 
@@ -85,6 +95,7 @@
 obj-$(CONFIG_IP_NF_MATCH_STATE) += ipt_state.o
 obj-$(CONFIG_IP_NF_MATCH_CONNTRACK) += ipt_conntrack.o
 obj-$(CONFIG_IP_NF_MATCH_UNCLEAN) += ipt_unclean.o
+obj-$(CONFIG_IP_NF_MATCH_STRING) += ipt_string.o
 obj-$(CONFIG_IP_NF_MATCH_TCPMSS) += ipt_tcpmss.o
 
 # targets
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/Config.in linux.dev/net/ipv4/netfilter/Config.in
--- linux.old/net/ipv4/netfilter/Config.in	Wed Jan 19 06:10:13 2005
+++ linux.new/net/ipv4/netfilter/Config.in	Mon Apr 28 12:32:38 2008
@@ -42,6 +42,9 @@
   fi
   if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
     dep_tristate '  Unclean match support (EXPERIMENTAL)' CONFIG_IP_NF_MATCH_UNCLEAN $CONFIG_IP_NF_IPTABLES
+    dep_tristate '  String match support (EXPERIMENTAL) ' CONFIG_IP_NF_MATCH_STRING $CONFIG_IP_NF_IPTABLES
+    dep_tristate '  SL nat string removal support (EXPERIMENTAL) ' CONFIG_IP_NF_NAT_SL $CONFIG_IP_NF_NAT
+    dep_tristate '  SL nat port removal support (EXPERIMENTAL) ' CONFIG_IP_NF_NAT_SLPORT $CONFIG_IP_NF_NAT
     dep_tristate '  Owner match support (EXPERIMENTAL)' CONFIG_IP_NF_MATCH_OWNER $CONFIG_IP_NF_IPTABLES
   fi
 # The targets
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/ipt_string.c linux.dev/net/ipv4/netfilter/ipt_string.c
--- linux.old/net/ipv4/netfilter/ipt_string.c	Wed Dec 31 16:00:00 1969
+++ linux.new/net/ipv4/netfilter/ipt_string.c	Wed Sep  5 00:23:41 2007
@@ -0,0 +1,287 @@
+/* Kernel module to match a string into a packet.
+ *
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ * 
+ * ChangeLog
+ *	02.09.2007: Fred Moyer <fred@redhotpenguin.com>, 
+ *		Evgeniy Polyakov <johnpol@2ka.mipt.ru>	
+ * 		Added ability to remove a matching string from the packet
+ *      	     
+ *	22.03.2004: Michael Rash <mbr@cipherdyne.org>
+ *		Added ability to replace a matching string in packet data
+ *		with a new string (checksum automatically recalculated for
+ *		tcp).
+ *	19.02.2002: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed SMP re-entrancy problem using per-cpu data areas
+ *		for the skip/shift tables.
+ *	02.05.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed kernel panic, due to overrunning boyer moore string
+ *		tables. Also slightly tweaked heuristic for deciding what
+ * 		search algo to use.
+ * 	27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ * 		Implemented Boyer Moore Sublinear search algorithm
+ * 		alongside the existing linear search based on memcmp().
+ * 		Also a quick check to decide which method to use on a per
+ * 		packet basis.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/file.h>
+#include <net/sock.h>
+#include <net/tcp.h>
+#include <net/udp.h>
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_string.h>
+
+MODULE_LICENSE("GPL");
+
+struct string_per_cpu {
+	int *skip;
+	int *shift;
+	int *len;
+};
+
+struct string_per_cpu *bm_string_data=NULL;
+
+/* Boyer Moore Sublinear string search - VERY FAST */
+char *search_sublinear (char *needle, char *haystack, int needle_len, int haystack_len) 
+{
+	int M1, right_end, sk, sh;  
+	int ended, j, i;
+
+	int *skip, *shift, *len;
+	
+	/* use data suitable for this CPU */
+	shift=bm_string_data[smp_processor_id()].shift;
+	skip=bm_string_data[smp_processor_id()].skip;
+	len=bm_string_data[smp_processor_id()].len;
+	
+	/* Setup skip/shift tables */
+	M1 = right_end = needle_len-1;
+	for (i = 0; i < BM_MAX_HLEN; i++) skip[i] = needle_len;  
+	for (i = 0; (int) needle[i]; i++) skip[(int) needle[i]] = M1 - i;  
+
+	for (i = 1; i < needle_len; i++) {   
+		for (j = 0; j < needle_len && needle[M1 - j] == needle[M1 - i - j]; j++);  
+		len[i] = j;  
+	}  
+
+	shift[0] = 1;  
+	for (i = 1; i < needle_len; i++) shift[i] = needle_len;  
+	for (i = M1; i > 0; i--) shift[len[i]] = i;  
+	ended = 0;  
+	
+	for (i = 0; i < needle_len; i++) {  
+		if (len[i] == M1 - i) ended = i;  
+		if (ended) shift[i] = ended;  
+	}  
+
+	/* Do the search*/  
+	while (right_end < haystack_len)
+	{
+		for (i = 0; i < needle_len && haystack[right_end - i] == needle[M1 - i]; i++);  
+		if (i == needle_len) {
+			return haystack+(right_end - M1);
+		}
+		
+		sk = skip[(int) haystack[right_end - i]];  
+		sh = shift[i];
+		right_end = max(right_end - i + sk, right_end + sh);  
+	}
+
+	return NULL;
+}  
+
+/* Linear string search based on memcmp() */
+char *search_linear (char *needle, char *haystack, int needle_len, int haystack_len) 
+{
+	char *k = haystack + (haystack_len-needle_len);
+	char *t = haystack;
+	
+	while ( t <= k ) {
+		if (memcmp(t, needle, needle_len) == 0)
+			return t;
+		t++;
+	}
+
+	return NULL;
+}
+
+
+static int
+match(const struct sk_buff *skb,
+      const struct net_device *in,
+      const struct net_device *out,
+      const void *matchinfo,
+      int offset,
+      const void *hdr,
+      u_int16_t datalen,
+      int *hotdrop)
+{
+	const struct ipt_string_info *info = matchinfo;
+	struct iphdr *ip = skb->nh.iph;
+	struct tcphdr *tcph;
+	int hlen, nlen,newlen  ;
+	char *needle, *haystack, *repl_ptr;
+	proc_ipt_search search=search_linear;
+	int result;
+
+	if ( !ip ) return 0;
+
+	/* get lengths, and validate them */
+	nlen=info->len;
+	hlen=ntohs(ip->tot_len)-(ip->ihl*4);
+	if ( nlen > hlen ) return 0;
+
+	needle=(char *)&info->string;
+	haystack=(char *)ip+(ip->ihl*4);
+
+	/* The sublinear search comes in to its own
+	 * on the larger packets */
+	if ( (hlen>IPT_STRING_HAYSTACK_THRESH) &&
+	  	(nlen>IPT_STRING_NEEDLE_THRESH) ) {
+		if ( hlen < BM_MAX_HLEN ) {
+			search=search_sublinear;
+		}else{
+			if (net_ratelimit())
+				printk(KERN_INFO "ipt_string: Packet too big "
+					"to attempt sublinear string search "
+					"(%d bytes)\n", hlen );
+		}
+	}
+	/* this copies the remaining bits to the offset where the replacement
+	   string is.  example, if we replace 
+
+	   host: foo.com:8135\r\ncontent-type: text/html\r\n
+			^    ^ 				   ^
+			|    |-------- rest_len -----------|
+			|    |
+			|    |- offset	
+			|
+			|-- repl_ptr
+	   using --string ":8135" --replace-string "_"   */
+
+	repl_ptr = search(needle, haystack, nlen, hlen);
+	if (repl_ptr != NULL ) {
+		int offset, rest_len;
+		unsigned int tcplen;
+
+		/*  distance from the end to the replacement pointer beginning */
+		rest_len = (unsigned int)((char *)skb->tail - repl_ptr)-nlen;
+	/*	printk(KERN_DEBUG "rest_len:    %u\n", rest_len); */
+			
+		/* distance from the end of the repl_ptr to the start of the skb data */
+		offset = (int)((char *)&repl_ptr[nlen] - (char *)skb->data);
+	/*	printk(KERN_DEBUG "offset:    %u\n", offset); */
+
+		/* copy over the replacement section */ 
+		if (skb_copy_bits(skb, offset, repl_ptr, rest_len))
+					return 0;
+	/*	printk(KERN_DEBUG "repl_ptr %s\n", repl_ptr); */
+	
+		/* trim the end of the data buffer */
+		skb_trim(skb, skb->len - nlen);
+
+		/* pad the rest with zeros */
+		skb = skb_pad(skb, nlen);
+
+		/* prevent tcp sequence from getting out of whack - doesn't work */
+		//	skb->h.th->seq = htons(ntohs(skb->h.th->seq) + nlen); 
+	//	printk(KERN_DEBUG "skb->h.th->seq  %u\n", ntohs(skb->h.th->seq));
+
+		/* set ip header total length */ 
+		skb->nh.iph->tot_len = htons(ntohs(ip->tot_len) - nlen);
+	//	printk(KERN_DEBUG "skb->nh.iph->tot_len: %u\n", skb->nh.iph->tot_len);
+		
+		/* set the ip header checksum */
+		skb->nh.iph->check = 0;
+		skb->nh.iph->check = ip_fast_csum((unsigned char *)skb->nh.iph, skb->nh.iph->ihl);
+
+		/* set the tcp header length */
+		tcplen = skb->len - (skb->nh.iph->ihl<<2);
+	//	printk(KERN_DEBUG "tcplen:   %u\n", tcplen);
+
+		/* set the tcp header checksum */
+		tcph = (struct tcphdr *)((u_int32_t*)skb->nh.iph + skb->nh.iph->ihl);
+		tcph->check = 0;
+		tcph->check = tcp_v4_check(tcph, tcplen, skb->nh.iph->saddr,
+					skb->nh.iph->daddr,
+					csum_partial((char *)tcph, tcplen, 0));
+	}
+    return ((repl_ptr!=NULL) ^ info->invert);
+}
+
+static int
+checkentry(const char *tablename,
+           const struct ipt_ip *ip,
+           void *matchinfo,
+           unsigned int matchsize,
+           unsigned int hook_mask)
+{
+
+       if (matchsize != IPT_ALIGN(sizeof(struct ipt_string_info)))
+               return 0;
+
+       return 1;
+}
+
+void string_freeup_data(void)
+{
+	int c;
+	
+	if ( bm_string_data ) {
+		for(c=0; c<smp_num_cpus; c++) {
+			if ( bm_string_data[c].shift ) kfree(bm_string_data[c].shift);
+			if ( bm_string_data[c].skip ) kfree(bm_string_data[c].skip);
+			if ( bm_string_data[c].len ) kfree(bm_string_data[c].len);
+		}
+		kfree(bm_string_data);
+	}
+}
+
+static struct ipt_match string_match
+= { { NULL, NULL }, "string", &match, &checkentry, NULL, THIS_MODULE };
+
+static int __init init(void)
+{
+	int c;
+	size_t tlen;
+	size_t alen;
+
+	tlen=sizeof(struct string_per_cpu)*smp_num_cpus;
+	alen=sizeof(int)*BM_MAX_HLEN;
+	
+	/* allocate array of structures */
+	if ( !(bm_string_data=kmalloc(tlen,GFP_KERNEL)) ) {
+		return 0;
+	}
+	
+	memset(bm_string_data, 0, tlen);
+	
+	/* allocate our skip/shift tables */
+	for(c=0; c<smp_num_cpus; c++) {
+		if ( !(bm_string_data[c].shift=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+		if ( !(bm_string_data[c].skip=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+		if ( !(bm_string_data[c].len=kmalloc(alen, GFP_KERNEL)) )
+			goto alloc_fail;
+	}
+	
+	return ipt_register_match(&string_match);
+
+alloc_fail:
+	string_freeup_data();
+	return 0;
+}
+
+static void __exit fini(void)
+{
+	ipt_unregister_match(&string_match);
+	string_freeup_data();
+}
+
+module_init(init);
+module_exit(fini);
diff -X .ignore -Nru linux.old/include/linux/netfilter_ipv4/ip_nat_sl_helper.h linux.new/include/linux/netfilter_ipv4/ip_nat_sl_helper.h
--- linux.old/include/linux/netfilter_ipv4/ip_nat_sl_helper.h	Mon Apr 28 13:03:16 2008
+++ linux.new/include/linux/netfilter_ipv4/ip_nat_sl_helper.h	Mon Apr 28 12:34:14 2008
@@ -0,0 +1,81 @@
+#ifndef _IP_NAT_SL_HELPER_H
+#define _IP_NAT_SL_HELPER_H
+
+#define SL_DEBUG 1
+
+/* packets must be on port 80 to have fun */
+#define SL_PORT 80
+
+/* packets must have this much data to go on the ride */
+#define MIN_PACKET_LEN 216
+
+/* needle for GET */
+#define GET_NEEDLE_LEN 5
+static char get_needle[GET_NEEDLE_LEN+1] = "GET /";
+
+/* needle for host header */
+#define HOST_NEEDLE_LEN 7
+static char host_needle[HOST_NEEDLE_LEN+1] = "\r\nHost:";
+
+/* the removal string for the port */
+#define PORT_NEEDLE_LEN 5
+static char port_needle[PORT_NEEDLE_LEN+1] = ":8135";
+
+#define CRLF_NEEDLE_LEN 2
+
+static int sl_remove_port(
+                struct sk_buff **skb,
+				struct ip_conntrack *ct,
+				enum   ip_conntrack_info ctinfo,
+				char   *host_ptr,
+				char   *user_data,
+				int    user_data_len ) {
+
+    char *port_ptr = NULL;
+    unsigned int match_offset = 0;
+    unsigned int match_len = 0;
+    
+    port_ptr = search_linear(
+                    port_needle,
+                    &host_ptr[HOST_NEEDLE_LEN + CRLF_NEEDLE_LEN],
+                    PORT_NEEDLE_LEN,
+                    user_data_len
+                    - (int)((char *)host_ptr - (char *)user_data)
+                    - (HOST_NEEDLE_LEN + CRLF_NEEDLE_LEN)  );
+
+    if (port_ptr == NULL) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\nno port rewrite found in packet\n");
+#endif
+        return 0;
+    }
+
+    match_offset = (int)((char *)port_ptr - (char *)user_data);
+    match_len    = (int)((char *)(*skb)->tail - (char *)port_ptr);
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "\nmatch_len: %d\n", match_len);
+    printk(KERN_DEBUG "match_offset: %d\n", match_offset);
+#endif
+
+    /* remove the port */
+    if (!ip_nat_mangle_tcp_packet( 
+                skb, ct, ctinfo,
+                match_offset,
+                match_len,
+                &port_ptr[PORT_NEEDLE_LEN],
+                match_len - PORT_NEEDLE_LEN ) )  {
+#ifdef SL_DEBUG
+        printk(KERN_ERR "unable to remove port needle\n");
+#endif
+        return 1;
+    }
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "\nport needle removed ok\n");
+#endif
+
+   return 1; 
+}
+
+#endif
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/ip_nat_slport.c linux.new/net/ipv4/netfilter/ip_nat_slport.c
--- linux.old/net/ipv4/netfilter/ip_nat_slport.c	Mon Apr 28 13:49:32 2008
+++ linux.new/net/ipv4/netfilter/ip_nat_slport.c	Mon Apr 28 12:26:44 2008
@@ -0,0 +1,249 @@
+/* Base stolen from ip_nat_ftp.c 
+   SL extension for TCP NAT alteration.
+   Inspiration from http://ftp.gnumonks.org/pub/doc/conntrack+nat.html */
+
+#include <linux/module.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <net/tcp.h>
+#include <linux/netfilter_ipv4/ip_nat.h>
+#include <linux/netfilter_ipv4/ip_nat_helper.h>
+#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#include <linux/netfilter_ipv4/ipt_string.h>
+#include <linux/netfilter_ipv4/ip_nat_sl_helper.h>
+
+MODULE_LICENSE("SL");
+MODULE_DESCRIPTION("Connection helper for SL HTTP requests");
+MODULE_AUTHOR("Fred Moyer <fred@redhotpenguin.com>"); 
+        
+int slport_data_fixup(
+              struct ip_conntrack *ct,
+              struct sk_buff **pskb,
+              enum   ip_conntrack_info ctinfo,
+              struct ip_conntrack_expect *expect )
+{
+    struct iphdr *iph = (*pskb)->nh.iph;
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+
+    char *host_ptr = NULL;
+    unsigned char *user_data = NULL;
+
+    int packet_len, user_data_len;
+    
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "ip_nat_sl: sl_data_fixup\n");
+#endif
+
+    /* no ip header is a problem */
+    if ( !iph ) return 0;
+
+    /* get packet length */
+    packet_len = ntohs(iph->tot_len) - (iph->ihl*4);
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: packet length: %d\n", packet_len);
+#endif    
+
+    /* get user data start */
+    user_data = (void *)tcph + tcph->doff*4;
+    
+    /* length of the packet user data */
+    user_data_len = (int)((char *)(*pskb)->tail -  (char *)user_data);
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: packet user data length: %d\n", user_data_len);
+    printk(KERN_DEBUG "packet check: %s\n", user_data);
+#endif
+    
+    /* see if this is a GET request */
+    if (strncmp(get_needle, user_data, GET_NEEDLE_LEN)) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\nno get_needle found in packet\n");
+#endif
+        return 1;
+    }
+
+    /* It is a GET request, look for the host needle */
+    host_ptr = search_linear( 
+            host_needle,
+            &user_data[GET_NEEDLE_LEN],
+            HOST_NEEDLE_LEN,
+            user_data_len - GET_NEEDLE_LEN );
+
+    if (host_ptr == NULL) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\nno host header found in packet\n");
+#endif
+        return 1;
+    }
+   
+
+    if (!sl_remove_port( pskb, ct, ctinfo,
+            host_ptr,
+            user_data,
+            user_data_len ) ) {
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "sl_remove_port returned false\n");
+#endif
+        return 0;
+    }
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "\nsl_remove_port returned true\n");
+#endif        
+    
+    return 1;
+}
+
+static unsigned int slport_help(
+             struct ip_conntrack *ct,
+             struct ip_conntrack_expect *exp,
+             struct ip_nat_info *info,
+             enum   ip_conntrack_info ctinfo,
+             unsigned int hooknum,
+             struct sk_buff **pskb)
+{
+    struct iphdr *iph = (*pskb)->nh.iph;
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+ 
+    int dir, plen;
+
+    /* HACK - skip dest port not 80 */
+    if (ntohs(tcph->dest) != SL_PORT) {
+        return 1;
+    }
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "\n\nip_nat_sl: tcphdr dst port %d, src port %d, ack seq %d\n",
+            ntohs(tcph->dest), ntohs(tcph->source),
+            tcph->ack_seq);
+    /* let SYN packets pass */
+    printk(KERN_DEBUG "ip_nat_sl: FIN: %d\n", tcph->fin);
+    printk(KERN_DEBUG "ip_nat_sl: SYN: %d\n", tcph->syn);
+    printk(KERN_DEBUG "ip_nat_sl: RST: %d\n", tcph->rst);
+    printk(KERN_DEBUG "ip_nat_sl: PSH: %d\n", tcph->psh);
+    printk(KERN_DEBUG "ip_nat_sl: ACK: %d\n", tcph->ack);
+    printk(KERN_DEBUG "ip_nat_sl: URG: %d\n", tcph->urg);
+    printk(KERN_DEBUG "ip_nat_sl: ECE: %d\n", tcph->ece);
+    printk(KERN_DEBUG "ip_nat_sl: CWR: %d\n", tcph->cwr);
+#endif    
+
+    /* nasty debugging */
+#ifdef SL_DEBUG
+    if (hooknum == NF_IP_POST_ROUTING) {
+        printk(KERN_DEBUG "ip_nat_sl: postrouting\n");
+    } else if (hooknum == NF_IP_PRE_ROUTING) {
+        printk(KERN_DEBUG "ip_nat_sl: prerouting\n");
+    } else if (hooknum == NF_IP_LOCAL_OUT) {
+        printk(KERN_DEBUG "ip_nat_sl: local out\n");
+    }
+
+    printk(KERN_DEBUG "ip_nat_sl: hooknum is %d\n", hooknum);
+#endif    
+
+    /* packet direction */
+    dir = CTINFO2DIR(ctinfo);
+#ifdef SL_DEBUG
+    if (dir == IP_CT_DIR_ORIGINAL) {
+        printk(KERN_DEBUG "ip_nat_sl: original direction\n");
+    } else if (dir == IP_CT_DIR_REPLY) {
+        printk(KERN_DEBUG "ip_nat_sl: reply direction\n");
+    } else if (dir == IP_CT_DIR_MAX) {
+        printk(KERN_DEBUG "ip_nat_sl: max direction\n");
+    }
+#endif    
+
+    /* Only mangle things once: original direction in POST_ROUTING
+       and reply direction on PRE_ROUTING. */
+    if (!((hooknum == NF_IP_POST_ROUTING) && (dir == IP_CT_DIR_ORIGINAL)) ) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "nat_sl: Not ORIGINAL and POSTROUTING, returning\n");
+#endif    
+        return NF_ACCEPT;
+    }
+
+
+    /* only work on push or ack packets */
+    if (!( (tcph->psh == 1) || (tcph->ack == 1)) ) {
+#ifdef SL_DEBUG
+        printk(KERN_INFO "ip_nat_sl: psh or ack\n");
+#endif    
+        return NF_ACCEPT;
+    }
+
+    /* get the packet length */
+    plen=ntohs(iph->tot_len)-(iph->ihl*4);
+#ifdef SL_DEBUG
+        printk(KERN_INFO "ip_nat_sl: packet length %d\n", plen);
+#endif    
+
+    /* minimum length to search the packet */
+    if (plen < MIN_PACKET_LEN) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "ip_nat_sl: packet too small to examine - %d\n", plen);
+#endif    
+        return NF_ACCEPT;
+    }
+
+
+    /* search the packet */
+    if (!slport_data_fixup(ct, pskb, ctinfo, exp)) {
+#ifdef SL_DEBUG
+            printk(KERN_ERR "ip_nat_sl: error sl_data_fixup\n");
+#endif
+    }
+    
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: sl_help end, returning nf_accept\n");
+#endif    
+    return NF_ACCEPT;
+}
+
+struct ip_nat_helper slport;
+
+static void fini(void)
+{
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: unregistering for port %d\n", SL_PORT);
+#endif
+    ip_nat_helper_unregister(&slport);
+}
+
+static int __init init(void)
+{
+    int ret = 0;
+    
+    slport.list.next = 0;
+    slport.list.prev = 0;
+    slport.me = THIS_MODULE;
+    slport.flags = (IP_NAT_HELPER_F_STANDALONE|IP_NAT_HELPER_F_ALWAYS);
+    slport.tuple.dst.protonum = IPPROTO_TCP;
+    
+    slport.tuple.dst.u.tcp.port = __constant_htons(SL_PORT);
+    slport.mask.dst.u.tcp.port = 0;
+    slport.help = slport_help;
+    slport.expect = NULL;
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: Trying to register for port %d\n", SL_PORT);
+#endif
+
+    ret = ip_nat_helper_register(&slport);
+
+
+    if (ret) {
+
+#ifdef SL_DEBUG
+        printk(KERN_ERR "ip_nat_sl: error registering helper for port %d\n", SL_PORT);
+#endif
+
+        fini();
+      return ret;
+    }
+    return ret;
+}
+
+module_init(init);
+module_exit(fini);
diff -X .ignore -Nru linux.old/net/ipv4/netfilter/ip_nat_sl.c linux.new/net/ipv4/netfilter/ip_nat_sl.c
--- linux.old/net/ipv4/netfilter/ip_nat_sl.c	Fri Nov  2 07:35:33 2007
+++ linux.new/net/ipv4/netfilter/ip_nat_sl.c	Mon Apr 28 12:40:20 2008
@@ -0,0 +1,517 @@
+/* Base stolen from ip_nat_ftp.c 
+   SL extension for TCP NAT alteration.
+   Inspiration from http://ftp.gnumonks.org/pub/doc/conntrack+nat.html */
+
+#include <linux/module.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <net/tcp.h>
+#include <linux/netfilter_ipv4/ip_nat.h>
+#include <linux/netfilter_ipv4/ip_nat_helper.h>
+#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#include <linux/netfilter_ipv4/ipt_string.h>
+#include <linux/netfilter_ipv4/ip_nat_sl_helper.h>
+#include <linux/jhash.h>
+
+MODULE_LICENSE("SL");
+MODULE_DESCRIPTION("Connection helper for SL HTTP requests");
+MODULE_AUTHOR("Fred Moyer <fred@redhotpenguin.com>");
+
+/* salt for the hashing */
+#define JHASH_SALT 420
+
+/* maximum packet length */ 
+#define MAX_PACKET_LEN 1480
+
+/* This is calculated anyway but we use it to check for big packets */
+#define SL_HEADER_LEN 29
+
+/* needle for Connection header */
+#define CONN_NEEDLE_LEN 13
+static char conn_needle[CONN_NEEDLE_LEN+1] = "\r\nConnection:"; 
+
+/* needle for Keep-Alive header */
+#define KA_NEEDLE_LEN 13
+static char ka_needle[KA_NEEDLE_LEN+1] = "\r\nKeep-Alive:"; 
+
+/* needle for CRLF */
+static char crlf_needle[CRLF_NEEDLE_LEN+1] = "\r\n";
+
+static int sl_data_fixup(
+              struct ip_conntrack *ct,
+              struct sk_buff **pskb,
+              enum   ip_conntrack_info ctinfo,
+              struct ip_conntrack_expect *expect )
+{
+    struct iphdr *iph = (*pskb)->nh.iph;
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+
+    /* pointer to the search result */
+    char *host_ptr = NULL;
+
+    /* pointer to the start of the user data */
+    unsigned char *user_data = NULL;
+    
+    int packet_len, match_offset, user_data_len;
+    
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: sl_data_fixup\n");
+#endif
+
+    /* no ip header is a problem */
+    if ( !iph ) return 0;
+
+    /* get packet length */
+    packet_len = ntohs(iph->tot_len) - (iph->ihl*4);
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: packet length: %d\n", packet_len);
+#endif
+
+    /* pointer to where the user data starts */
+    user_data = (void *)tcph + tcph->doff*4;
+    
+    /* length of the packet user data */
+    user_data_len = (int)((char *)(*pskb)->tail -  (char *)user_data);
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: packet user data length: %d\n", user_data_len); 
+    printk(KERN_DEBUG "packet check: %s\n", user_data);
+#endif
+       
+    /* see if this is a GET request */
+    if (strncmp(get_needle, user_data, GET_NEEDLE_LEN)) {    
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "no get_needle found in packet\n");
+#endif        
+        return 1;
+    } 
+
+    /* It is a GET request, look for the host needle */    
+    host_ptr = search_linear( 
+        host_needle, 
+        &user_data[GET_NEEDLE_LEN], 
+        HOST_NEEDLE_LEN, 
+        user_data_len );
+
+    if (host_ptr == NULL) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "no host header found in packet\n");
+#endif
+        return 1;
+    } 
+
+    /* look for a port rewrite and remove it if exists */
+    if (sl_remove_port(
+                    pskb, ct, ctinfo,
+                    host_ptr,
+                    user_data,
+                    user_data_len ) ) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "port rewrite removed\n");
+#endif
+        return 1;
+    }
+
+    {   
+        /* found a host header, insert the x-sl header */ 
+        struct ethhdr *bigmac = (*pskb)->mac.ethernet;
+        unsigned int jhashed = 0;
+        int slheader_len = 0;
+        char dst_string[12];
+        char src_string[12];
+        char slheader[SL_HEADER_LEN];
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\n\npacket check after host search: %s\n", host_ptr);
+        printk(KERN_DEBUG "packet len:  %d, slheader_len %d, sum %d\n", 
+            packet_len, SL_HEADER_LEN, packet_len + SL_HEADER_LEN);
+#endif        
+
+        /* check for full packet, remove ka and conn headers */
+        if ((packet_len + SL_HEADER_LEN) >= MAX_PACKET_LEN) {
+           
+            /* pointers to keep alive and connection headers */
+            char *ka_ptr,      *conn_ptr, 
+                 *ka_crlf_ptr, *conn_crlf_ptr, 
+                 *after_get,   *crlf_ptr;
+
+            int match_len = 0;
+            int delta = 0;
+            
+            int ka_offset = 0;
+            int ka_crlf_offset = 0;
+            
+            int conn_offset = 0;  
+            int conn_crlf_offset = 0;  
+            
+            int host_offset = 0;  
+            
+#ifdef SL_DEBUG
+            printk(KERN_DEBUG "big packet warning, removing keep-alive headers\n");
+#endif
+
+            /* ******************************************** */
+            /* remove the keep-alive and connection headers */
+
+#ifdef SL_DEBUG
+            printk(KERN_DEBUG "\n\npacket check before search: %s\n", 
+                    &user_data[GET_NEEDLE_LEN]);
+#endif    
+            /* first advance the search pointer to the first header in the packet */
+            after_get = search_linear(
+                crlf_needle,
+                &user_data[GET_NEEDLE_LEN], 
+                CRLF_NEEDLE_LEN, 
+                user_data_len - GET_NEEDLE_LEN );
+            /* no crlf?  return */
+            if (!after_get) {
+#ifdef SL_DEBUG
+                printk(KERN_DEBUG "\npacket is request line only\n");
+#endif
+                return 1;
+            }
+            
+            /* try to find the connection header, start at first crlf */
+            conn_ptr = search_linear(
+                    conn_needle, 
+                    after_get, 
+                    CONN_NEEDLE_LEN, 
+                    user_data_len - (int)((char *)after_get - (char *)user_data) );
+
+            if (!conn_ptr) {
+#ifdef SL_DEBUG
+                printk(KERN_DEBUG "\nno Connection header found\n");
+#endif
+                return 1;
+            }
+
+            /* look for the keep alive header now, start at first crlf */
+            ka_ptr = search_linear(
+                    ka_needle, 
+                    after_get,
+                    KA_NEEDLE_LEN,
+                    user_data_len - (int)((char *)after_get - (char *)user_data ) );
+
+            if (!ka_ptr) {
+#ifdef SL_DEBUG
+                printk(KERN_DEBUG "\nno Keep-Alive header found\n");
+#endif
+                return 1;
+            }
+
+            ka_offset = (int)((char *)ka_ptr - (char *)user_data);
+            conn_offset = (int)((char *)conn_ptr - (char *)user_data);
+
+            /* now find the pointers to the end of both of the headers */
+            ka_crlf_ptr = search_linear(
+                    crlf_needle, 
+                    &ka_ptr[KA_NEEDLE_LEN + CRLF_NEEDLE_LEN],
+                    CRLF_NEEDLE_LEN,
+                    user_data_len 
+                        - (int)((char *)ka_ptr - (char *)user_data )
+                        - (KA_NEEDLE_LEN + CRLF_NEEDLE_LEN ));
+
+            conn_crlf_ptr = search_linear( 
+                    crlf_needle, 
+                    &conn_ptr[CONN_NEEDLE_LEN + CRLF_NEEDLE_LEN],
+                    CRLF_NEEDLE_LEN,
+                    user_data_len 
+                        - (int)((char *)conn_ptr - (char *)user_data ) 
+                        - (CONN_NEEDLE_LEN + CRLF_NEEDLE_LEN) );
+
+            if (!ka_crlf_ptr || !conn_crlf_ptr) {
+#ifdef SL_DEBUG
+                printk(KERN_DEBUG "\nno crlf header found after ka headers\n");
+#endif
+                return 1;
+            }
+
+            /* figure out what order the headers are in */ 
+            ka_crlf_offset = (int)((char *)ka_crlf_ptr - (char *)user_data);
+            conn_crlf_offset = (int)((char *)conn_crlf_ptr - (char *)user_data);
+            
+            if (ka_crlf_offset == conn_offset) {
+                /* Keep-Alive:...Connection: */
+                match_offset = ka_offset;
+                delta = (conn_crlf_offset - match_offset);
+                crlf_ptr = conn_crlf_ptr;
+                match_len = (int)((char *)(*pskb)->tail - (char *)conn_ptr);
+            } else if (conn_crlf_offset == ka_offset) {
+                /* Connection:...Keep-Alive: */
+                match_offset = conn_offset;
+                delta = (ka_crlf_offset - match_offset);
+                crlf_ptr = ka_crlf_ptr;
+                match_len = (int)((char *)(*pskb)->tail - (char *)ka_ptr);
+            } else {
+                /* Headers are not sequential, nothing can be done */
+#ifdef SL_DEBUG
+                printk(KERN_DEBUG "\nnon sequential keep-alive headers\n");
+#endif
+                return 1;
+            }
+
+#ifdef SL_DEBUG
+            printk(KERN_DEBUG "\nconn offset: %d\n", conn_offset);
+            printk(KERN_DEBUG "ka offset: %d\n", ka_offset);
+            printk(KERN_DEBUG "conn crlf offset: %d\n", conn_crlf_offset);
+            printk(KERN_DEBUG "ka crlf offset: %d\n", ka_crlf_offset);
+            printk(KERN_DEBUG "match offset: %d\n", match_offset);
+#endif
+
+            if (!ip_nat_mangle_tcp_packet(pskb, ct, ctinfo,
+                                          match_offset,  // match_offset
+                                          match_len,       // match_len
+                                          crlf_ptr, // rep_buffer 
+                                          match_len - delta)) {    // rep_len
+#ifdef SL_DEBUG
+                printk(KERN_ERR "\ncould not remove ka headers\n"); 
+#endif                   
+                return 0; 
+            }
+
+            /* distance to host header, need to move it */
+            host_offset = (int)(host_ptr + CRLF_NEEDLE_LEN - (int)user_data); 
+
+            if (match_offset < host_offset ) {
+                /* move the host: pointer back the amount of bytes removed */ 
+                host_ptr -= delta;
+            }
+
+        }  /* END FIXUP BIG PACKET */
+
+        /* create the X-SL Header */        
+        /* source mac present */   
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\nsource mac found: %02x%02x%02x%02x%02x%02x\n",
+            bigmac->h_source[0],
+            bigmac->h_source[1],
+            bigmac->h_source[2],
+            bigmac->h_source[3],
+            bigmac->h_source[4],
+            bigmac->h_source[5]);
+
+        printk(KERN_DEBUG "\ndest mac found: %02x%02x%02x%02x%02x%02x\n",
+            bigmac->h_dest[0],
+            bigmac->h_dest[1],
+            bigmac->h_dest[2],
+            bigmac->h_dest[3],
+            bigmac->h_dest[4],
+            bigmac->h_dest[5]);
+#endif        
+
+        sprintf(src_string, "%02x%02x%02x%02x%02x%02x",
+            bigmac->h_source[0],
+            bigmac->h_source[1],
+            bigmac->h_source[2],
+            bigmac->h_source[3],
+            bigmac->h_source[4],
+            bigmac->h_source[5]);
+
+        sprintf(dst_string, "%02x%02x%02x%02x%02x%02x",
+            bigmac->h_dest[0],
+            bigmac->h_dest[1],
+            bigmac->h_dest[2],
+            bigmac->h_dest[3],
+            bigmac->h_dest[4],
+            bigmac->h_dest[5]);
+
+        /* jenkins hash obfuscation */
+        jhashed = jhash((void *)src_string,    sizeof(src_string), JHASH_SALT);
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "jhashed_src: %x\n", jhashed);
+        printk(KERN_DEBUG "dst_string %s\n", dst_string);
+#endif        
+                
+        /* create the http header */
+        slheader_len = sprintf(slheader, "X-SL: %x|%s\r\n", jhashed, dst_string);
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "ip_nat_sl: slheader %s, length %d\n", slheader, 
+                                                                 slheader_len);
+#endif        
+
+        /* handle sprintf failure */
+        if (slheader_len == 0) {
+#ifdef SL_DEBUG
+            printk(KERN_ERR "sprintf fail for slheader");
+#endif        
+            return 0;
+        } 
+
+        /* now insert the sl header */
+        /* calculate distance to the host header */
+        match_offset = (int)(host_ptr + CRLF_NEEDLE_LEN - (int)user_data); 
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\nhost match_offset %u\n", match_offset);    
+#endif        
+
+        /* insert the slheader into the http headers */
+        if (!ip_nat_mangle_tcp_packet( pskb, ct, ctinfo, match_offset, 0, 
+                                       slheader, slheader_len)) {  
+
+#ifdef SL_DEBUG
+            printk(KERN_ERR "failed to mangle packet\n");
+#endif        
+            return 0;
+        }
+
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "\npacket mangled ok: %s\n\n", &host_ptr[-match_offset]);
+#endif        
+
+    return 1;
+    }
+}
+
+static unsigned int sl_help(struct ip_conntrack *ct,
+             struct ip_conntrack_expect *exp,
+             struct ip_nat_info *info,
+             enum ip_conntrack_info ctinfo,
+             unsigned int hooknum,
+             struct sk_buff **pskb)
+{
+    struct iphdr *iph = (*pskb)->nh.iph;
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+
+    int dir, plen;
+
+    /* HACK - skip dest port not 80 */
+    if (ntohs(tcph->dest) != SL_PORT) {
+        return 1;
+    }
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "\n\nip_nat_sl: tcphdr dst port %d, src port %d, ack seq %d\n",
+            ntohs(tcph->dest), ntohs(tcph->source),
+            tcph->ack_seq);
+    /* let SYN, FIN, RST, PSH, ACK, ECE, CWR, URG packets pass */
+    printk(KERN_DEBUG "ip_nat_sl: FIN: %d\n", tcph->fin);
+    printk(KERN_DEBUG "ip_nat_sl: SYN: %d\n", tcph->syn);
+    printk(KERN_DEBUG "ip_nat_sl: RST: %d\n", tcph->rst);
+    printk(KERN_DEBUG "ip_nat_sl: PSH: %d\n", tcph->psh);
+    printk(KERN_DEBUG "ip_nat_sl: ACK: %d\n", tcph->ack);
+    printk(KERN_DEBUG "ip_nat_sl: URG: %d\n", tcph->urg);
+    printk(KERN_DEBUG "ip_nat_sl: ECE: %d\n", tcph->ece);
+    printk(KERN_DEBUG "ip_nat_sl: CWR: %d\n", tcph->cwr);
+#endif    
+
+    /* nasty debugging */
+#ifdef SL_DEBUG
+    if (hooknum == NF_IP_POST_ROUTING) {
+        printk(KERN_DEBUG "ip_nat_sl: postrouting\n");
+    } else if (hooknum == NF_IP_PRE_ROUTING) {
+        printk(KERN_DEBUG "ip_nat_sl: prerouting\n");
+    } else if (hooknum == NF_IP_LOCAL_OUT) {
+        printk(KERN_DEBUG "ip_nat_sl: local out\n");
+    }
+
+    printk(KERN_DEBUG "ip_nat_sl: hooknum is %d\n", hooknum);
+#endif    
+
+    /* packet direction */
+    dir = CTINFO2DIR(ctinfo);
+#ifdef SL_DEBUG
+    if (dir == IP_CT_DIR_ORIGINAL) {
+        printk(KERN_DEBUG "ip_nat_sl: original direction\n");
+    } else if (dir == IP_CT_DIR_REPLY) {
+        printk(KERN_DEBUG "ip_nat_sl: reply direction\n");
+    } else if (dir == IP_CT_DIR_MAX) {
+        printk(KERN_DEBUG "ip_nat_sl: max direction\n");
+    }
+#endif    
+
+    /* Only mangle things once: original direction in POST_ROUTING
+       and reply direction on PRE_ROUTING. */
+    if (!((hooknum == NF_IP_POST_ROUTING) && (dir == IP_CT_DIR_ORIGINAL)) ) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "nat_sl: Not ORIGINAL and POSTROUTING, returning\n");
+#endif    
+        return NF_ACCEPT;
+    }
+
+
+    /* only work on push or ack packets */
+    if (!( (tcph->psh == 1) || (tcph->ack == 1)) ) {
+#ifdef SL_DEBUG
+        printk(KERN_INFO "ip_nat_sl: psh or ack\n");
+#endif    
+        return NF_ACCEPT;
+    }
+
+    /* get the packet length */
+    plen=ntohs(iph->tot_len)-(iph->ihl*4);
+#ifdef SL_DEBUG
+        printk(KERN_INFO "ip_nat_sl: packet length %d\n", plen);
+#endif    
+
+    /* minimum length to search the packet */
+    if (plen < MIN_PACKET_LEN) {
+#ifdef SL_DEBUG
+        printk(KERN_DEBUG "ip_nat_sl: packet too small to examine - %d\n", plen);
+#endif    
+        return NF_ACCEPT;
+    }
+
+
+    /* search the packet */
+    if (!sl_data_fixup(ct, pskb, ctinfo, exp)) {
+#ifdef SL_DEBUG
+            printk(KERN_ERR "ip_nat_sl: error sl_data_fixup\n");
+#endif
+    }
+    
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: sl_help end, returning nf_accept\n");
+#endif    
+    return NF_ACCEPT;
+}
+
+struct ip_nat_helper sl;
+
+static void fini(void)
+{
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: unregistering for port %d\n", SL_PORT);
+#endif
+    ip_nat_helper_unregister(&sl);
+}
+
+static int __init init(void)
+{
+    int ret = 0;
+    
+    sl.list.next = 0;
+    sl.list.prev = 0;
+    sl.me = THIS_MODULE;
+    sl.flags = (IP_NAT_HELPER_F_STANDALONE|IP_NAT_HELPER_F_ALWAYS);
+    sl.tuple.dst.protonum = IPPROTO_TCP;
+    
+    sl.tuple.dst.u.tcp.port = __constant_htons(SL_PORT);
+    sl.mask.dst.u.tcp.port = 0;
+    sl.help = sl_help;
+    sl.expect = NULL;
+
+#ifdef SL_DEBUG
+    printk(KERN_DEBUG "ip_nat_sl: Trying to register for port %d\n", SL_PORT);
+#endif
+
+    ret = ip_nat_helper_register(&sl);
+
+    if (ret) {
+
+#ifdef SL_DEBUG
+        printk(KERN_ERR "ip_nat_sl: error registering helper, port %d\n", SL_PORT);
+#endif
+
+        fini();
+        return ret;
+    }
+    return ret;
+}
+
+module_init(init);
+module_exit(fini);
