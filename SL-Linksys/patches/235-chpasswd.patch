--- busybox-1.00/loginutils/chpasswd.c	2007-11-21 21:59:08.000000000 -0800
+++ busybox-1.00/loginutils/chpasswd.c  2007-11-21 21:58:44.000000000 -0800
@@ -0,0 +1,350 @@
+/* vi: set sw=4 ts=4: */
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <signal.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <utime.h>
+#include <syslog.h>
+#include <time.h>
+#include <sys/resource.h>
+#include <errno.h>
+
+#include "busybox.h"
+
+static char crypt_passwd[128];
+
+static int chcreate_backup(const char *backup, FILE * fp);
+static int chnew_password(char *newpass, const struct passwd *pw, int amroot, int algo);
+static void set_filesize_limit(int blocks);
+
+
+int chget_algo(char *a)
+{
+	int x = 1;					/* standard: MD5 */
+
+	if (strcasecmp(a, "des") == 0)
+		x = 0;
+	return x;
+}
+
+int get_newpass(char *a)
+{
+    return a;
+}
+
+extern int chupdate_passwd(const struct passwd *pw, char *crypt_pw)
+{
+	char filename[1024];
+	char buf[1025];
+	char buffer[80];
+	char username[32];
+	char *pw_rest;
+	int mask;
+	int continued;
+	FILE *fp;
+	FILE *out_fp;
+	struct stat sb;
+	struct flock lock;
+
+#ifdef CONFIG_FEATURE_SHADOWPASSWDS
+	if (access(bb_path_shadow_file, F_OK) == 0) {
+		snprintf(filename, sizeof filename, "%s", bb_path_shadow_file);
+	} else
+#endif
+	{
+		snprintf(filename, sizeof filename, "%s", bb_path_passwd_file);
+	}
+
+	if (((fp = fopen(filename, "r")) == 0) || (fstat(fileno(fp), &sb))) {
+		/* return 0; */
+		return 1;
+	}
+
+#if 0
+	/* Lock the password file before updating */
+	lock.l_type = F_WRLCK;
+	lock.l_whence = SEEK_SET;
+	lock.l_start = 0;
+	lock.l_len = 0;
+	if (fcntl(fileno(fp), F_SETLK, &lock) < 0) {
+		fprintf(stderr, "%s: %s\n", filename, strerror(errno));
+		return 1;
+	}
+	lock.l_type = F_UNLCK;
+#endif
+
+	snprintf(buf, sizeof buf, "%s-", filename);
+	if (chcreate_backup(buf, fp)) {
+		fcntl(fileno(fp), F_SETLK, &lock);
+		fclose(fp);
+		return 1;
+	}
+	snprintf(buf, sizeof buf, "%s+", filename);
+	mask = umask(0777);
+	out_fp = fopen(buf, "w");
+	umask(mask);
+	if ((!out_fp) || (fchmod(fileno(out_fp), sb.st_mode & 0777))
+		|| (fchown(fileno(out_fp), sb.st_uid, sb.st_gid))) {
+		fcntl(fileno(fp), F_SETLK, &lock);
+		fclose(fp);
+		fclose(out_fp);
+		return 1;
+	}
+
+	continued = 0;
+	snprintf(username, sizeof username, "%s:", pw->pw_name);
+	rewind(fp);
+	while (!feof(fp)) {
+		fgets(buffer, sizeof buffer, fp);
+		if (!continued) {		// Check to see if we're updating this line.
+			if (strncmp(username, buffer, strlen(username)) == 0) {	// we have a match.
+				pw_rest = strchr(buffer, ':');
+				*pw_rest++ = '\0';
+				pw_rest = strchr(pw_rest, ':');
+				fprintf(out_fp, "%s:%s%s", buffer, crypt_pw, pw_rest);
+			} else {
+				fputs(buffer, out_fp);
+			}
+		} else {
+			fputs(buffer, out_fp);
+		}
+		if (buffer[strlen(buffer) - 1] == '\n') {
+			continued = 0;
+		} else {
+			continued = 1;
+		}
+		bzero(buffer, sizeof buffer);
+	}
+
+	if (fflush(out_fp) || fsync(fileno(out_fp)) || fclose(out_fp)) {
+		unlink(buf);
+		fcntl(fileno(fp), F_SETLK, &lock);
+		fclose(fp);
+		return 1;
+	}
+	unlink(filename);
+	if (rename(buf, filename) < 0) {
+		fcntl(fileno(fp), F_SETLK, &lock);
+		fclose(fp);
+		return 1;
+	} else {
+		fcntl(fileno(fp), F_SETLK, &lock);
+		fclose(fp);
+		return 0;
+	}
+}
+
+
+extern int chpasswd_main(int argc, char **argv)
+{
+	int amroot;
+	char *cp;
+	char *np;
+	char *name;
+	char *myname;
+	int flag;
+    char *newpass;
+	int algo = 1;				/* -a - password algorithm */
+	int lflg = 0;				/* -l - lock account */
+	int uflg = 0;				/* -u - unlock account */
+	int dflg = 0;				/* -d - delete password */
+	const struct passwd *pw;
+
+#ifdef CONFIG_FEATURE_SHADOWPASSWDS
+	const struct spwd *sp;
+#endif							/* CONFIG_FEATURE_SHADOWPASSWDS */
+	amroot = (getuid() == 0);
+    if (!amroot) {
+			bb_error_msg_and_die( "You aren't root, goodbye.\n");
+    }
+	openlog("chpasswd", LOG_PID | LOG_CONS | LOG_NOWAIT, LOG_AUTH);
+	while ((flag = getopt(argc, argv, "a:dlp:u")) != EOF) {
+		switch (flag) {
+		case 'a':
+			algo = chget_algo(optarg);
+			break;
+		case 'd':
+			dflg++;
+			break;
+		case 'l':
+			lflg++;
+			break;
+        case 'p':
+            newpass = get_newpass(optarg);
+            break;
+		case 'u':
+			uflg++;
+			break;
+		default:
+			bb_show_usage();
+		}
+	}
+	myname = (char *) bb_xstrdup(my_getpwuid(NULL, getuid(), -1));
+	/* exits on error */
+	if (optind < argc) {
+		name = argv[optind];
+	} else {
+		name = myname;
+	}
+	if ((lflg || uflg || dflg) && (optind >= argc || !amroot)) {
+		bb_show_usage();
+	}
+	pw = getpwnam(name);
+	if (!pw) {
+		bb_error_msg_and_die("Unknown user %s\n", name);
+	}
+#ifdef CONFIG_FEATURE_SHADOWPASSWDS
+	sp = getspnam(name);
+	if (!sp) {
+		sp = (struct spwd *) pwd_to_spwd(pw);
+	}
+	cp = sp->sp_pwdp;
+	np = sp->sp_namp;
+#else
+	cp = pw->pw_passwd;
+	np = name;
+#endif							/* CONFIG_FEATURE_SHADOWPASSWDS */
+
+	safe_strncpy(crypt_passwd, cp, sizeof(crypt_passwd));
+	if (!(dflg || lflg || uflg)) {
+		printf("Changing password for %s\n", name);
+		if (chnew_password(newpass, pw, amroot, algo)) {
+			bb_error_msg_and_die( "The password for %s is unchanged.\n", name);
+		}
+	} else if (lflg) {
+		if (crypt_passwd[0] != '!') {
+			memmove(&crypt_passwd[1], crypt_passwd,
+					sizeof crypt_passwd - 1);
+			crypt_passwd[sizeof crypt_passwd - 1] = '\0';
+			crypt_passwd[0] = '!';
+		}
+	} else if (uflg) {
+		if (crypt_passwd[0] == '!') {
+			memmove(crypt_passwd, &crypt_passwd[1],
+					sizeof crypt_passwd - 1);
+		}
+	} else if (dflg) {
+		crypt_passwd[0] = '\0';
+	}
+	set_filesize_limit(30000);
+	signal(SIGHUP, SIG_IGN);
+	signal(SIGINT, SIG_IGN);
+	signal(SIGQUIT, SIG_IGN);
+	umask(077);
+	if (setuid(0)) {
+		syslog(LOG_ERR, "can't setuid(0)");
+		bb_error_msg_and_die( "Cannot change ID to root.\n");
+	}
+	if (!chupdate_passwd(pw, crypt_passwd)) {
+		syslog(LOG_INFO, "password for `%s' changed by user `%s'", name,
+			   myname);
+		printf("Password changed.\n");
+	} else {
+		syslog(LOG_WARNING, "an error occurred updating the password file");
+		bb_error_msg_and_die("An error occurred updating the password file.\n");
+	}
+	return (0);
+}
+
+
+
+static int chcreate_backup(const char *backup, FILE * fp)
+{
+	struct stat sb;
+	struct utimbuf ub;
+	FILE *bkfp;
+	int c, mask;
+
+	if (fstat(fileno(fp), &sb))
+		/* return -1; */
+		return 1;
+
+	mask = umask(077);
+	bkfp = fopen(backup, "w");
+	umask(mask);
+	if (!bkfp)
+		/* return -1; */
+		return 1;
+
+	/* TODO: faster copy, not one-char-at-a-time.  --marekm */
+	rewind(fp);
+	while ((c = getc(fp)) != EOF) {
+		if (putc(c, bkfp) == EOF)
+			break;
+	}
+	if (c != EOF || fflush(bkfp)) {
+		fclose(bkfp);
+		/* return -1; */
+		return 1;
+	}
+	if (fclose(bkfp))
+		/* return -1; */
+		return 1;
+
+	ub.actime = sb.st_atime;
+	ub.modtime = sb.st_mtime;
+	utime(backup, &ub);
+	return 0;
+}
+
+static int i64c(int i)
+{
+	if (i <= 0)
+		return ('.');
+	if (i == 1)
+		return ('/');
+	if (i >= 2 && i < 12)
+		return ('0' - 2 + i);
+	if (i >= 12 && i < 38)
+		return ('A' - 12 + i);
+	if (i >= 38 && i < 63)
+		return ('a' - 38 + i);
+	return ('z');
+}
+
+static char *crypt_make_salt(void)
+{
+	time_t now;
+	static unsigned long x;
+	static char result[3];
+
+	time(&now);
+	x += now + getpid() + clock();
+	result[0] = i64c(((x >> 18) ^ (x >> 6)) & 077);
+	result[1] = i64c(((x >> 12) ^ x) & 077);
+	result[2] = '\0';
+	return result;
+}
+
+
+static int chnew_password(char *newpass, const struct passwd *pw, int amroot, int algo)
+{
+	char orig[200];
+	char pass[200];
+
+	orig[0] = '\0';
+	safe_strncpy(pass, newpass, sizeof(pass));
+	bzero(newpass, strlen(newpass));
+	bzero(orig, sizeof(orig));
+
+	if (algo == 1) {
+		char salt[6]="$1$\0\0\0";
+		memcpy(salt+3,crypt_make_salt(),3);
+		newpass = pw_encrypt(pass, salt);
+	} else
+		newpass = pw_encrypt(pass, crypt_make_salt());
+	bzero(pass, sizeof pass);
+	safe_strncpy(crypt_passwd, newpass, sizeof(crypt_passwd));
+	return 0;
+}
+
+static void set_filesize_limit(int blocks)
+{
+	struct rlimit rlimit_fsize;
+
+	rlimit_fsize.rlim_cur = rlimit_fsize.rlim_max = 512L * blocks;
+	setrlimit(RLIMIT_FSIZE, &rlimit_fsize);
+}
--- busybox-1.00/loginutils/Makefile.in	2007-11-21 22:16:58.000000000 -0800
+++ busybox-1.00/loginutils/Makefile.in	2007-11-21 22:17:14.000000000 -0800
@@ -29,6 +29,7 @@
 LOGINUTILS-$(CONFIG_GETTY)	+= getty.o
 LOGINUTILS-$(CONFIG_LOGIN)	+= login.o
 LOGINUTILS-$(CONFIG_PASSWD)	+= passwd.o
+LOGINUTILS-$(CONFIG_CHPASSWD)	+= chpasswd.o
 LOGINUTILS-$(CONFIG_SU)		+= su.o
 LOGINUTILS-$(CONFIG_SULOGIN)	+= sulogin.o
 LOGINUTILS-$(CONFIG_VLOCK)	+= vlock.o
@@ -40,6 +41,7 @@
 needcrypt-y:=
 needcrypt-$(CONFIG_LOGIN)	:= y
 needcrypt-$(CONFIG_PASSWD)	:= y
+needcrypt-$(CONFIG_CHPASSWD)	:= y
 needcrypt-$(CONFIG_SU)		:= y
 needcrypt-$(CONFIG_SULOGIN)	:= y
 needcrypt-$(CONFIG_VLOCK)	:= y
--- busybox-1.00/sysdeps/linux/defconfig 2007-11-21 22:21:10.000000000 -0800
+++ busybox-1.00/sysdeps/linux/defconfig 2007-11-21 22:21:28.000000000 -0800
@@ -246,7 +246,8 @@
 # CONFIG_DELUSER is not set
 # CONFIG_GETTY is not set
 # CONFIG_LOGIN is not set
-# CONFIG_PASSWD is not set
+CONFIG_PASSWD=y
+CONFIG_CHPASSWD=y
 # CONFIG_SU is not set
 # CONFIG_SULOGIN is not set
 # CONFIG_VLOCK is not set
--- busybox-1.00/include/applets.h	2007-11-21 22:30:11.000000000 -0800
+++ busybox-1.00/include/applets.h	2007-11-21 22:30:26.000000000 -0800
@@ -97,6 +97,9 @@
 #ifdef CONFIG_CHOWN
 	APPLET(chown, chown_main, _BB_DIR_BIN, _BB_SUID_NEVER)
 #endif
+#ifdef CONFIG_CHPASSWD
+	APPLET(chpasswd, chpasswd_main, _BB_DIR_USR_BIN, _BB_SUID_ALWAYS)
+#endif
 #ifdef CONFIG_CHROOT
 	APPLET(chroot, chroot_main, _BB_DIR_USR_SBIN, _BB_SUID_NEVER)
 #endif
--- busybox-1.00/include/usage.h	2007-11-21 22:32:38.000000000 -0800
+++ busybox-1.00/include/usage.h	2007-11-21 22:34:37.000000000 -0800
@@ -1857,6 +1857,20 @@
 	"\t-l\tLocks (disables) the specified user account.\n" \
 	"\t-u\tUnlocks (re-enables) the specified user account."
 
+#define chpasswd_trivial_usage \
+	"-p password"
+#define chpasswd_full_usage \
+	"Change the super user password, takes the password.\n" \
+	"An adaptation of password, meant for non interactive use.\n" \
+	"Options:\n" \
+	"\t-a\tDefine which algorithm shall be used for the password.\n" \
+	"\t\t\t(Choices: des, md5" \
+	PASSWORD_ALG_TYPES(", sha1") \
+	")\n\t-d\tDelete the password for the specified user account.\n" \
+	"\t-p\tNew password to set.\n" \
+	"\t-l\tLocks (disables) the specified user account.\n" \
+	"\t-u\tUnlocks (re-enables) the specified user account."
+
 #define patch_trivial_usage \
 	"[-p<num>]"
 #define patch_full_usage \
--- busybox-1.00/loginutils/Config.in	2007-11-21 23:01:52.000000000 -0800
+++ busybox-1.00/loginutils/Config.in	2007-11-21 23:02:55.000000000 -0800
@@ -98,6 +98,17 @@
 	  Note that Busybox binary must be setuid root for this applet to
 	  work properly.
 
+config CONFIG_CHPASSWD
+	bool "chpasswd"
+	default n
+	select CONFIG_FEATURE_SUID
+	help
+	  chpasswd changes passwords for the root user via command line
+          arguments, non-interactive.
+
+	  Note that Busybox binary must be setuid root for this applet to
+	  work properly.
+
 config CONFIG_SU
 	bool "su"
 	default n
