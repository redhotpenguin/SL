#!/usr/bin/microperl

# this program copyright 2010 Silver Lining Networks Inc., and is governed
# by the Silver Lining software license, see http://www.silverliningnetworks.com/
# if you have not received a copy of the license with this software, please
# email support@silverliningnetworks.com for a copy

our $DEBUG       = 0;
our $CONFIG_FILE = '/etc/sl/sl.conf';
our $ATTEMPTS    = 0;
our $UCI         = '/sbin/uci';
our $MD5         = '/usr/bin/md5sum';
our $RMMOD       = '/sbin/rmmod';
our $INSMOD      = '/sbin/insmod';
our $LSMOD       = '/sbin/lsmod';
our $IPTABLES    = '/usr/sbin/iptables';
our $VERSION     = '02217';
our $WGET        = '/usr/bin/wget -T 30 -t 3';
$|++;

# figure out if we are already running
my $already_running = `pgrep -f sl_fw_ha | wc -l`;

if ($already_running > 2) {
	warn("sl_fw_ha already running: $already_running");
	exit 1;
}

# figure out if we are a gateway or repeater
my $role = uci_get('node.general.role');

print "role is $role\n" if $DEBUG;
my $type = ( $role == 1 ) ? 'gateway' : 'client';

# based on that, figure out what interface to route traffic through
my $int = ( $role == 1 ) ? 'ath1' : 'br-lan';

my $cmd = shift;

# grab the mac address
my $board = uci_get('node.general.board');

my $macaddr;

# hack for ubiquiti
if ( $board eq 'UBNT' ) {

    $macaddr = uci_get('node.general.wlanMAC');
}
else {

    $macaddr = uci_get('node.general.myMAC');
}

print "Board is $board, Macaddr is $macaddr" if $DEBUG;

####################################################
# no config is a non starter
my $config_proxy = get_config_proxy($CONFIG_FILE);

unless ($config_proxy) {

    print STDERR "no sln config_proxy exists\n";
    exit(1);
}

print "Using proxy $config_proxy\n" if $DEBUG;

# hard stop option
if ($cmd && ($cmd eq 'allstop')) {
	stop_sln( $config_proxy, $macaddr );
	warn("sln all stop complete");
	exit;
}

# ping the proxy
if ( my $slug = ping_ok( $config_proxy, $macaddr ) ) {

    print "ping was ok, sln state on\n" if $DEBUG;
    
    if ( $slug =~ m/^Ad Serving On$/ ) {

	print "ad serving heartbeat triggered\n" if $DEBUG;
        start_sln( $config_proxy, $macaddr );
        
    } elsif ($slug =~ m/^Ad Serving Off$/ ) {

        stop_sln( $config_proxy, $macaddr );
    }

    # skiplist update
    my ($default_skips) = $slug =~ m/DefaultSkips\s([^\n]+)/;
    if ($default_skips) {
    	warn("yay, we have default skips $default_skips") if DEBUG;
        my $get = `$WGET -O /tmp/skips.txt $default_skips`;
        if ($? != 0) {
            warn("failed to grab $default_skips");
            undef $default_skips;
        }

        my $md5get = `$WGET -O /tmp/skips.txt.md5 $default_skips\.md5`;
        if ($? != 0) {
            warn("failed to grab $default_skips\.md5");
            undef $default_skips;
        }
        
        # compare the md5sums        
        my $skip_actual=`$MD5 /tmp/skips.txt | head -c 32`;
        chomp($skip_actual);
        my $skip_md5=`/bin/cat /tmp/skips.txt.md5 | head -c 32`;
        chomp($skip_md5);

        die "$default_skips md5 error" unless $skip_actual eq $skip_md5;
        `/bin/mv /tmp/skips.txt /etc/sl/skips.txt`;
    }


    my ($custom_skips) = $slug =~ m/CustomSkips\s([^\n]+)/;
    if ($custom_skips) {
        my $get = `$WGET -O /etc/sl/custom_skips.txt $custom_skips`;
        if ($? != 0) {
            warn("failed to grab $custom_skips");
            undef $custom_skips;
        }

        my $md5get = `$WGET -O /tmp/skips.txt.md5 $custom_skips\.md5`;
        if ($? != 0) {
            warn("failed to grab $custom_skips\.md5");
            undef $custom_skips;
        }
      
        # compare the md5sums        
        my $skip_actual=`$MD5 /tmp/skips.txt | head -c 32`;
        chomp($skip_actual);
        my $skip_md5=`/bin/cat /tmp/skips.txt.md5 | head -c 32`;
        chomp($skip_md5);

        die "$custom_skips md5 error" unless $skip_actual eq $skip_md5;
        `/bin/mv /tmp/skips.txt /etc/sl/custom_skips.txt`;
    }

    if ($default_skips or $custom_skips) {
        # hup the service
        warn("skips in place, stopping") if DEBUG;
        stop_sln( $config_proxy, $macaddr );
        sleep 1;
        warn("skips in place, starting") if DEBUG;
        start_sln( $config_proxy, $macaddr);
    }

    exit(0);

}
else {

    print STDERR "No available proxies, disabling silver lining\n";
    stop_sln($config_proxy);
    exit(1);
}


# uci returns values that need to be chomped.  yuck.
sub uci_get {
    my $key = shift || die 'uci_get';
    my $val = `$UCI get $key` || die 'uci get $key';
    chomp($val);
    return $val;
}

sub get_config_proxy {
    my $config_file = shift;
    my $fh;
    unless ( -e $config_file ) {
        restore_config_file();
    }
    open( $fh, '<', $config_file ) or die $!;
    my $line_count = 0;
    while (<$fh>) {
        $line_count++;
        next unless $_ =~ m/^proxy/;
        $config_proxy = ( split( /\s+/, $_ ) )[1];
    }
    close($fh) or die $!;
    if ( $line_count == 0 ) {
        my $restored = restore_config_file();
        unless ($restored) {
            print STDERR "could not restore config file, exiting\n";
            return;
        }

        $config_proxy = get_config_proxy($config_file);
        unless ($config_proxy) {
            print STDERR "could not get config proxy, fatal error`\n";
            return;
        }
        elsif ($config_proxy) {
            print "retrieved config_proxy from restored default\n" if $DEBUG;
        }
    }
    unless ($config_proxy) {
        print STDERR "config file contains data but no config_proxy\n";
        return;
    }
    print "got config_proxy $config_proxy\n" if $DEBUG;
    return $config_proxy;

}

sub restore_config_file {

    if ( $ATTEMPTS++ == 1 ) {
        print STDERR "failed to restore_config_file, exiting\n";
        return;
    }

    # config file got truncated somehow
    my $file = 'sl.conf';
    my $url  = "http://fw.slwifi.com/conf/$file";
    chdir('/tmp');
    unlink($file) if -e $file;
    print "grabbing url $url\n" if $DEBUG;
    my $grab = `$WGET $url`;
    unless ( -e $file ) {
        print STDERR "grab failed!: $grab\n";

		# not much we can do without a config file
        return;
    }

    my $mv = `mv $file $CONFIG_FILE`;
    return 1;
}

sub stop_sln {
    my $proxy = shift;

    return unless _check_sln();

    print "sln active, de-activating\n" if $DEBUG;

    my $teardown = _teardown_sln($proxy);

    print "teardown sln $teardown\n" if $DEBUG;

    # remove kernel modules
    `rmmod nf_nat_sl`;
    `rmmod nf_conntrack_sl`;

    return 1;
}

sub start_sln {
    my ( $proxy, $macaddr ) = @_;

    # see if sln is active
    return 1 if _check_sln();

    print "sln inactive, activating\n" if $DEBUG;

    # first make sure the base nodogsplash rules are in effect
    return unless _nodog_active();

    # load the kernel modules
    $macaddr =~ s/\://g;
    $macaddr = lc($macaddr);
    my $load_cmd = "$INSMOD nf_nat_sl sl_device=$macaddr sl_proxy=$proxy";
    `$INSMOD nf_conntrack_sl`;
    `$load_cmd`;

    my $base_setup  = _setup_sln_base($proxy);
    my $skips_setup = _setup_sln_skips($proxy);
    my $noskips_setup = _setup_sln_noskips($proxy);
    print "base_setup $base_setup, skips setup $skips_setup, noskips_setup $noskips_setup\n" if $DEBUG;

    return 1;
}

sub _nodog_active {

    my $out = `/usr/bin/ndsctl status`;
    my ($inactive) = $out =~ m/not started/;
    return !$active;
}

# checks to see if sln firewall enabled
sub _check_sln {

    print "check for ndsSLN target\n" if $DEBUG;
    # cheap way, try to recreate the chain and check the exit code
    `$IPTABLES -t nat -N ndsSLN`;

    my $sln_is_active = $?;
    print sprintf("is sln active? %s\n", $?) if $DEBUG;;

    unless ($sln_is_active) {
        print "sln inactive, removing test chain\n" if $DEBUG;
        # delete the test chain unless it is active
        `$IPTABLES -t nat -X ndsSLN`;
    }

    return $sln_is_active;
}

# sets up the base firewall rules
sub _setup_sln_base {
    my $proxy = shift;

    my $base = <<BASE;
$IPTABLES -t nat -N ndsSLN
$IPTABLES -t nat -I ndsSLN 1 -p udp -j ACCEPT
$IPTABLES -t nat -I ndsSLN 2 -p tcp -m tcp --dport 443 -j ACCEPT
$IPTABLES -t nat -I ndsSLN 3 -p tcp -m tcp --dport 8135 -j DNAT --to :80
$IPTABLES -t nat -I ndsSLN 4 -p tcp -m tcp ! --dport 80 -j ACCEPT
$IPTABLES -t nat -I ndsSLN 5 -m tcp -p tcp --dport 80 -j DNAT --to-destination $proxy
$IPTABLES -t nat -I ndsSLN 6 -j ACCEPT
$IPTABLES -t nat -D ndsOUT -m mark --mark 0x400/0x700 -j ACCEPT
$IPTABLES -t nat -I ndsOUT 2 -m mark --mark 0x400/0x700 -j ndsSLN
BASE

    foreach my $rule ( split( "\n", $base ) ) {
	print "setting up base rule '$rule'\n" if $DEBUG;
        `$rule`;
    }

    return 1;
}

sub _teardown_sln {
    my $proxy = shift;

    print "tearing down sln\n" if $DEBUG;

    my $base = <<BASE;
$IPTABLES -t nat -D ndsOUT -m mark --mark 0x400/0x700 -j ndsSLN
$IPTABLES -t nat -I ndsOUT 2 -m mark --mark 0x400/0x700 -j ACCEPT
$IPTABLES -t nat -F ndsSLN
$IPTABLES -t nat -X ndsSLN
BASE

    foreach my $rule ( split( "\n", $base ) ) {
        `$rule`;
    }

    return 1;
}

sub _setup_sln_noskips {
	my $proxy = shift;
    print "setting up noskips\n" if $DEBUG;

    my $fh;
    open( $fh, '<', '/etc/sl/noskips.txt' ) or die $!;
    while ( my $line = <$fh> ) {

        next if ((substr($line, 0,1) eq '#') or
                 (substr($line, 0,1) eq "\n") or
                 (substr($line, 0,1) eq ' '));

        chomp($line);

	    print "setting up noskip $line\n" if $DEBUG;
    	`$IPTABLES -t nat -I ndsSLN 5 -p tcp -m tcp --dport 80 --dst $line -j DNAT --to-destination $proxy`;
    }
    close($fh) or die $!;

	return 1;
}

sub _setup_sln_skips {
    my $proxy = shift;

    print "setting up skips\n" if $DEBUG;

    my $fh;
    open( $fh, '<', '/etc/sl/skips.txt' ) or die $!;
	my $i = 0;
	my $throttle = ($role == 1) ? 4 : 1;
    while ( my $line = <$fh> ) {

        next if ((substr($line, 0,1) eq '#') or
                 (substr($line, 0,1) eq "\n") or
                 (substr($line, 0,1) eq ' '));

        chomp($line);

	    print "setting up default skip $line\n" if $DEBUG;
    	`$IPTABLES -t nat -I ndsSLN 5 --dst $line -m tcp -p tcp --dport 80 -j ACCEPT`;

		#sleep 1 if ($i++ % $throttle == 0);
    }
    close($fh) or die $!;

    # local hosts added by user
    if ( -e '/etc/sl/custom_skips.txt' ) {

        open( $fh, '<', '/etc/sl/custom_skips.txt' );
        while ( my $line = <$fh> ) {

            next if ((substr($line, 0,1) eq '#') or
                     (substr($line, 0,1) eq "\n") or
                     (substr($line, 0,1) eq ' '));

            chomp($line);

            print "setting up custom skip $line\n" if $DEBUG;
            `$IPTABLES -t nat -I ndsSLN 5 --dst $line -m tcp -p tcp --dport 80 -j ACCEPT`;
        }
        close($fh) or die $!;
    }

    return 1;
}

sub ping_ok {
    my ( $proxy, $macaddr ) = @_;

    # escape the macaddress
    my $escaped = $macaddr;
    $escaped =~ s/:/%3A/g;

    my $slug = "$macaddr\_$VERSION";
    my $loc  = "http://$proxy/sl_secret_ping_button/$slug";
    my $cmd  = "$WGET $loc  2>&1";

    print "Making request $cmd\n" if $DEBUG;
    my $ping = `$cmd`;
    print "ping result: _$ping\_\n"  if $DEBUG;
    print "looking for file $slug\n" if $DEBUG;
    if (   ( !-e $slug )
        or ( $ping eq '' )
        or ( $ping =~ m/error 50/i )
        or ( $ping =~ m/connection refused/i )
        or ( $ping =~ m/error/i )
        or ( $ping =~ m/unable to connect/i )
        or ( $ping =~ m/no response from server/i ) )
    {

        print STDERR "Proxy $proxy returned ping error:\n  $ping\n";
        return;

    }
    elsif ( -e $slug ) {

        print "ping ok, file $macaddr exists\n" if $DEBUG;

        my $fh;
        open( $fh, '<', $slug ) or die $!;
        my $ct = do { local $/; <$fh> };
        close($fh) or die $!;

        unlink($slug) or print STDERR "could not remove ping file $slug\n";

        chomp($ct);
        print("slug package is $ct\n") if $DEBUG;
        if ( length($ct) > 0 ) {

            print "Ping returned ok: $ping\n" if $DEBUG;
            return $ct;

        }
        else {

            print("slug missing, stop energizers\n") if $DEBUG;
            return;
        }
    }
}

