#!/usr/bin/microperl

# this program copyright 2009 Silver Lining Networks Inc., and is governed
# by the Silver Lining software license, see http://www.silverliningnetworks.com/
# if you have not received a copy of the license with this software, please
# email support@silverliningnetworks.com for a copy

our $DEBUG       = 1;
our $CONFIG_FILE = '/etc/sl/sl.conf';
our $ATTEMPTS    = 0;
our $UCI         = '/bin/uci';
our $MD5         = '/usr/bin/md5sum';
our $RMMOD       = '/sbin/rmmod';
our $INSMOD      = '/sbin/insmod';
our $LSMOD       = '/sbin/lsmod';
our $IPTABLES    = '/usr/sbin/iptables';
our $VERSION     = '020';


####################################################
# no config is a non starter
my $config_proxy = get_config_proxy($CONFIG_FILE);
unless ($config_proxy) {
    print STDERR "no config_proxy returned, exiting\n";
    exit(1);
}

print "Using proxy $config_proxy\n" if $DEBUG;


##################################################################
# try to ping the wan first, if we cannot do that all bets are off
my ($wan_gateway) = `/sbin/route` =~ m/default\s+(\S+)/;

print "wan gateway is $wan_gateway\n" if $DEBUG;

unless ($wan_gateway) {
	print STDERR "no wan gateway, take us offline\n";
	_stop_sln($config_proxy);
	exit(1);
}

my $ping_cmd = "/bin/ping -c 3 $wan_gateway";
print "ping cmd is $ping_cmd\n" if $DEBUG;
my $ping = `$ping_cmd`;
my ($packet_loss) = $ping =~ m/(\d+)% packet loss/;

print "\nping was $ping\n" if $DEBUG;

if ($packet_loss == 100) {

	print STDERR "ping cmd $ping_cmd failed to ping $wan_gateway\n";
	_stop_sln($config_proxy);
	
} elsif (($packet_loss != 0) && ($packet_loss < 100)) {

	print STDERR "ping packet loss was $packet_loss %\n";
}

# ping the proxy
if ( ping_ok($config_proxy) ) {

    print "ping was ok, sln state on\n" if $DEBUG;
    start_sln($config_proxy);
    exit(0);
    
} else {

    print STDERR "No available proxies, disabling silver lining\n";
    stop_sln($config_proxy);
    exit(1);

}

exit(0);

###########################

sub get_config_proxy {
    my $config_file = shift;
    my $fh;
    unless ( -e $config_file ) {
        restore_config_file();
    }
    open( $fh, '<', $config_file ) or die $!;
    my $line_count = 0;
    while (<$fh>) {
        $line_count++;
        next unless $_ =~ m/^proxy/;
        $config_proxy = ( split( /\s+/, $_ ) )[1];
    }
    close($fh) or die $!;
    if ( $line_count == 0 ) {
        my $restored = restore_config_file();
        unless ($restored) {
            print STDERR "could not restore config file, exiting\n";
            exit(1);
        }

        $config_proxy = get_config_proxy($config_file);
        unless ($config_proxy) {
            print STDERR "could not get config proxy, fatal error`\n";
            return;
        }
        elsif ($config_proxy) {
            print "retrieved config_proxy from restored default\n" if $DEBUG;
        }
    }
    unless ($config_proxy) {
        print STDERR "config file contains data but no config_proxy\n";
        return;
    }
    print "got config_proxy $config_proxy\n" if $DEBUG;
    return $config_proxy;

}

sub restore_config_file {

    if ( $ATTEMPTS++ == 1 ) {
        print STDERR "failed to restore_config_file, exiting\n";
        return;
    }

    # config file got truncated somehow
    my $url =
      'http://www.redhotpenguin.com/sl_secret_ping_button/linksys/etc/sl.conf';
    my $file = 'sl.conf';
    chdir('/tmp');
    unlink($file)               if -e $file;
    print "grabbing url $url\n" if $DEBUG;
    my $grab = `/usr/bin/wget $url`;
    unless ( -e $file ) {
        print STDERR "grab failed!: $grab\n";

        # not much we can do without a config file
        return;
    }

    my $mv = `mv $file $CONFIG_FILE`;
    return 1;
}

sub stop_sln {
	my $proxy = shift;

	return unless _check_sln();

	print "sln active, de-activating\n" if $DEBUG;

	my $skips_teardown = _teardown_sln_skips($proxy);
	my $base_teardown = _teardown_sln_base($proxy);

	print "base_setup $base_setup, skips setup $skips_setup\n" if $DEBUG;

	return 1;
}

sub start_sln {
	my $proxy = shift;

	# see if sln is active
	return 1 if _check_sln();

	print "sln inactive, activating\n" if $DEBUG;

	my $base_setup = _setup_sln_base($proxy);
	my $skips_setup = _setup_sln_skips($proxy);

	print "base_setup $base_setup, skips setup $skips_setup\n" if $DEBUG;

	return 1;
}

# checks to see if sln firewall enabled
sub _check_sln {

	# cheap way, look for the target
        my $sln_is_active = grep { /^ndsSLN/ } (`iptables -t nat --list`);

	print "sln is active? $sln_is_active\n" if $DEBUG;

	return $sln_is_active;
}

# sets up the base firewall rules
sub _setup_sln_base {
	my $proxy = shift;

	my $base = <<BASE;
$IPTABLES -t nat -N ndsSLN
$IPTABLES -t nat -I ndsSLN 1 -i ath1 -p tcp -m tcp --dport 8135 -j DNAT --to :80
$IPTABLES -t nat -I ndsSLN 2 -i ath1 -p tcp -m tcp --dport 80 -j DNAT --to-destination $proxy
$IPTABLES -t nat -I ndsSLN 3 -j ACCEPT
$IPTABLES -t nat -D ndsOUT -m mark --mark 0x100 -j ACCEPT
$IPTABLES -t nat -I ndsOUT -m mark --mark 0x100 -j ndsSLN
BASE

	foreach my $rule (split("\n", $base)) {
		`$rule`;
	}

	return 1;
}

sub _teardown_sln_base {
	my $proxy = shift;

	my $base = <<BASE;
$IPTABLES -t nat -D ndsOUT -m mark --mark 0x100 -j ndsSLN
$IPTABLES -t nat -I ndsOUT -m mark --mark 0x100 -j ACCEPT
$IPTABLES -t nat -D ndsSLN 2 -i ath1 -p tcp -m tcp --dport 80 -j DNAT --to-destination $proxy
$IPTABLES -t nat -D ndsSLN 1 -i ath1 -p tcp -m tcp --dport 8135 -j DNAT --to :80
$IPTABLES -t nat -D ndsSLN 3 -j ACCEPT
$IPTABLES -t nat -X ndsSLN
BASE	

	foreach my $rule (split("\n", $base)) {
		`$rule`;
	}

	return 1;
}

sub _setup_sln_skips {

	my $fh;
	open($fh, '<', '/etc/sl/skips.txt');
	while(my $line = <$fh>) {
		chomp($line);
		`$IPTABLES -t nat -I ndsSLN 2 --dst $line -m tcp -p tcp -j ACCEPT`;
	}
	close($fh);

	# local hosts added by user
	if (-e '/etc/sl/custom_skips.txt') {
	
		open($fh, '<', '/etc/sl/skips.txt');
		while(my $line = <$fh>) {
			chomp($line);
			`$IPTABLES -t nat -I ndsSLN 2 --dst $line -m tcp -p tcp -j ACCEPT`;
		}
		close($fh);
	}

	return 1;
}

sub _teardown_sln_skips {

	my $fh;
	open($fh, '<', '/etc/sl/skips.txt');
	while(my $line = <$fh>) {
		chomp($line);
		`$IPTABLES -t nat -D ndsSLN --dst $line -m tcp -p tcp -j ACCEPT`;
	}
	close($fh);

	# local hosts added by user
	if (-e '/etc/sl/custom_skips.txt') {
	
		open($fh, '<', '/etc/sl/skips.txt');
		while(my $line = <$fh>) {
			chomp($line);
			`$IPTABLES -t nat -D ndsSLN --dst $line -m tcp -p tcp -j ACCEPT`;
		}
		close($fh);
	}

	return 1;
}


sub ping_ok {
    my $proxy = shift;

    # grab the mac address
    my $ifconfig = `ifconfig`;
    my ($macaddr) = $ifconfig =~ m/eth0.*?(\w{2}\:\w{2}\:\w{2}\:\w{2}\:\w{2}\:\w{2})/g;
    print "Macaddr is $macaddr\n" if $DEBUG;

    # escape the macaddress
    my $escaped = $macaddr;
    $escaped =~ s/:/%3A/g;

    my $slug = "$macaddr\_$VERSION";
    my $loc = "http://$proxy/sl_secret_ping_button/$slug";
    my $cmd = "wget $loc  2>&1";
    print "Making request $cmd\n" if $DEBUG;
    my $ping = `$cmd`;
    print "ping result: _$ping\_\n" if $DEBUG;
    print "looking for file $slug\n" if $DEBUG;
    if
	(  (! -e $slug)
	or   ( $ping eq '' )
        or ( $ping =~ m/error 50/i )
        or ( $ping =~ m/connection refused/i )
        or ( $ping =~ m/error/i )
        or ( $ping =~ m/unable to connect/i )
        or ($ping =~ m/no response from server/i ) )
    {

        print STDERR "Proxy $proxy returned ping error:\n  $ping\n";
        return;

    } elsif (-e $slug) {

    	print "ping ok, file $macaddr exists\n" if $DEBUG;
    	unlink($slug) or print STDERR "could not remove ping file $slug\n";
	print "Ping returned ok: $ping\n" if $DEBUG;
        return 1;
    }
}

